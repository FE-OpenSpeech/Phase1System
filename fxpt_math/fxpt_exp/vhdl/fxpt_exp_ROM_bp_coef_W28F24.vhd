-------------------------------------------------------------------
-- Note: This is machine generated code.  Do not hand edit.
--       Modify Matlab function fxpt_exp_vhdl_code_gen_ROM_bp_coef.m instead.
--       This file was auto generated on 08-Jul-2017 16:14:08
--       This VDHL file creates a ROM of bi=(1+2^-i) coefficients (bp = b_positive) to be used in
--       calculating the fixed-point exp() function
--       using additive normalization.
-------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity fxpt_exp_ROM_bp_coef_W28F24 is
   port (
      clock     : in  std_logic;
      address   : in  std_logic_vector( 4 downto 0);
      bp_coef   : out std_logic_vector(27 downto 0)
   );
end entity;

architecture rtl of fxpt_exp_ROM_bp_coef_W28F24 is
begin
   process (clock) is
   begin
       if(rising_edge(clock)) then
           case (address) is  -- i=address;  bi=(1+2^-i) 
              when "00000" => bp_coef <= "0010000000000000000000000000";  -- bi = 010.000000000000000000000000
              when "00001" => bp_coef <= "0001100000000000000000000000";  -- bi = 001.100000000000000000000000
              when "00010" => bp_coef <= "0001010000000000000000000000";  -- bi = 001.010000000000000000000000
              when "00011" => bp_coef <= "0001001000000000000000000000";  -- bi = 001.001000000000000000000000
              when "00100" => bp_coef <= "0001000100000000000000000000";  -- bi = 001.000100000000000000000000
              when "00101" => bp_coef <= "0001000010000000000000000000";  -- bi = 001.000010000000000000000000
              when "00110" => bp_coef <= "0001000001000000000000000000";  -- bi = 001.000001000000000000000000
              when "00111" => bp_coef <= "0001000000100000000000000000";  -- bi = 001.000000100000000000000000
              when "01000" => bp_coef <= "0001000000010000000000000000";  -- bi = 001.000000010000000000000000
              when "01001" => bp_coef <= "0001000000001000000000000000";  -- bi = 001.000000001000000000000000
              when "01010" => bp_coef <= "0001000000000100000000000000";  -- bi = 001.000000000100000000000000
              when "01011" => bp_coef <= "0001000000000010000000000000";  -- bi = 001.000000000010000000000000
              when "01100" => bp_coef <= "0001000000000001000000000000";  -- bi = 001.000000000001000000000000
              when "01101" => bp_coef <= "0001000000000000100000000000";  -- bi = 001.000000000000100000000000
              when "01110" => bp_coef <= "0001000000000000010000000000";  -- bi = 001.000000000000010000000000
              when "01111" => bp_coef <= "0001000000000000001000000000";  -- bi = 001.000000000000001000000000
              when "10000" => bp_coef <= "0001000000000000000100000000";  -- bi = 001.000000000000000100000000
              when "10001" => bp_coef <= "0001000000000000000010000000";  -- bi = 001.000000000000000010000000
              when "10010" => bp_coef <= "0001000000000000000001000000";  -- bi = 001.000000000000000001000000
              when "10011" => bp_coef <= "0001000000000000000000100000";  -- bi = 001.000000000000000000100000
              when "10100" => bp_coef <= "0001000000000000000000010000";  -- bi = 001.000000000000000000010000
              when "10101" => bp_coef <= "0001000000000000000000001000";  -- bi = 001.000000000000000000001000
              when "10110" => bp_coef <= "0001000000000000000000000100";  -- bi = 001.000000000000000000000100
              when "10111" => bp_coef <= "0001000000000000000000000010";  -- bi = 001.000000000000000000000010
              when "11000" => bp_coef <= "0001000000000000000000000001";  -- bi = 001.000000000000000000000001
              when "11001" => bp_coef <= "0001000000000000000000000000";  -- bi = 001.000000000000000000000000
              when others  => bp_coef <= (others => '0');
           end case;
        end if;
     end process;
end rtl;
