-------------------------------------------------------------------
-- Note: This is machine generated code.  Do not hand edit.
--       Modify Matlab function fxpt_exp_vhdl_code_gen_ROM_bn_coef.m instead.
--       This file was auto generated on 08-Jul-2017 16:14:09
--       This VDHL file creates a ROM of bi=(1-2^-i) coefficients (bn = b_negative) to be used in
--       calculating the fixed-point exp() function
--       using additive (2-sided) normalization.
-------------------------------------------------------------------
library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;

entity fxpt_exp_ROM_bn_coef_W28F24 is
   port (
      clock     : in  std_logic;
      address   : in  std_logic_vector( 4 downto 0);
      bn_coef   : out std_logic_vector(27 downto 0)
   );
end entity;

architecture rtl of fxpt_exp_ROM_bn_coef_W28F24 is
begin
   process (clock) is
   begin
       if(rising_edge(clock)) then
           case (address) is  -- i=address;  bi=(1-2^-i) 
              when "00000" => bn_coef <= "0000000000000000000000000000";  -- bi = 000.000000000000000000000000
              when "00001" => bn_coef <= "0000100000000000000000000000";  -- bi = 000.100000000000000000000000
              when "00010" => bn_coef <= "0000110000000000000000000000";  -- bi = 000.110000000000000000000000
              when "00011" => bn_coef <= "0000111000000000000000000000";  -- bi = 000.111000000000000000000000
              when "00100" => bn_coef <= "0000111100000000000000000000";  -- bi = 000.111100000000000000000000
              when "00101" => bn_coef <= "0000111110000000000000000000";  -- bi = 000.111110000000000000000000
              when "00110" => bn_coef <= "0000111111000000000000000000";  -- bi = 000.111111000000000000000000
              when "00111" => bn_coef <= "0000111111100000000000000000";  -- bi = 000.111111100000000000000000
              when "01000" => bn_coef <= "0000111111110000000000000000";  -- bi = 000.111111110000000000000000
              when "01001" => bn_coef <= "0000111111111000000000000000";  -- bi = 000.111111111000000000000000
              when "01010" => bn_coef <= "0000111111111100000000000000";  -- bi = 000.111111111100000000000000
              when "01011" => bn_coef <= "0000111111111110000000000000";  -- bi = 000.111111111110000000000000
              when "01100" => bn_coef <= "0000111111111111000000000000";  -- bi = 000.111111111111000000000000
              when "01101" => bn_coef <= "0000111111111111100000000000";  -- bi = 000.111111111111100000000000
              when "01110" => bn_coef <= "0000111111111111110000000000";  -- bi = 000.111111111111110000000000
              when "01111" => bn_coef <= "0000111111111111111000000000";  -- bi = 000.111111111111111000000000
              when "10000" => bn_coef <= "0000111111111111111100000000";  -- bi = 000.111111111111111100000000
              when "10001" => bn_coef <= "0000111111111111111110000000";  -- bi = 000.111111111111111110000000
              when "10010" => bn_coef <= "0000111111111111111111000000";  -- bi = 000.111111111111111111000000
              when "10011" => bn_coef <= "0000111111111111111111100000";  -- bi = 000.111111111111111111100000
              when "10100" => bn_coef <= "0000111111111111111111110000";  -- bi = 000.111111111111111111110000
              when "10101" => bn_coef <= "0000111111111111111111111000";  -- bi = 000.111111111111111111111000
              when "10110" => bn_coef <= "0000111111111111111111111100";  -- bi = 000.111111111111111111111100
              when "10111" => bn_coef <= "0000111111111111111111111110";  -- bi = 000.111111111111111111111110
              when "11000" => bn_coef <= "0000111111111111111111111111";  -- bi = 000.111111111111111111111111
              when "11001" => bn_coef <= "0000111111111111111111111111";  -- bi = 000.111111111111111111111111
              when others  => bn_coef <= (others => '0');
           end case;
        end if;
     end process;
end rtl;
