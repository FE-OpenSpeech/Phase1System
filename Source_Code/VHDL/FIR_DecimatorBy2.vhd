-- -------------------------------------------------------------
--
-- Module: FIR_DecimatorBy2
-- Generated by MATLAB(R) 9.2 and the Filter Design HDL Coder 3.1.1.
-- Generated on: 2017-06-06 13:19:16
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- OptimizeForHDL: on
-- ClockInputs: Multiple
-- Name: FIR_DecimatorBy2
-- SerialPartition: 8
-- InputDataType: numerictype(1,32,28)
-- TestBenchName: firdecim_copy_tb
-- TestBenchStimulus: step ramp chirp noise 
-- GenerateHDLTestBench: off

-- -------------------------------------------------------------
-- HDL Implementation    : Fully Serial
-- Folding Factor        : 8
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure   : Direct-Form FIR Polyphase Decimator
-- Decimation Factor  : 2
-- Polyphase Length   : 17
-- Filter Length      : 33
-- Stable             : Yes
-- Linear Phase       : Yes (Type 1)
--
-- Arithmetic         : fixed
-- Numerator          : s32,32 -> [-5.000000e-01 5.000000e-01)
-- -------------------------------------------------------------
-- Multipliers           : 30


LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY FIR_DecimatorBy2 IS
   PORT( clk                             :   IN    std_logic;                     -- clk = 8 * Fs_input
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(31 DOWNTO 0); -- sfix32_En28   -- Fs_input
         clk1                            :   IN    std_logic;                     -- ck1 = clk/16 = Fs_input/2 
         clk_enable1                     :   IN    std_logic; 
         reset1                          :   IN    std_logic; 
         filter_out                      :   OUT   std_logic_vector(68 DOWNTO 0)  -- sfix69_En60
         );

END FIR_DecimatorBy2;
--### Clock rate is 8 times the input and 16 times the output sample rate for this architecture.
--### Successful completion of VHDL code generation process for filter: FIR_DecimatorBy2
--### HDL latency is 2 samples


----------------------------------------------------------------
--Module Architecture: FIR_DecimatorBy2
----------------------------------------------------------------
ARCHITECTURE rtl OF FIR_DecimatorBy2 IS
  -- Local Functions
  -- Type Definitions
  TYPE input_pipeline_type IS ARRAY (NATURAL range <>) OF signed(31 DOWNTO 0); -- sfix32_En28
  -- Constants
  CONSTANT const_one                      : std_logic := '1'; -- boolean
  CONSTANT coeffphase1_1                  : signed(31 DOWNTO 0) := to_signed(6495482, 32); -- sfix32_En32
  CONSTANT coeffphase1_2                  : signed(31 DOWNTO 0) := to_signed(-10672579, 32); -- sfix32_En32
  CONSTANT coeffphase1_3                  : signed(31 DOWNTO 0) := to_signed(14367030, 32); -- sfix32_En32
  CONSTANT coeffphase1_4                  : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase1_5                  : signed(31 DOWNTO 0) := to_signed(-54194786, 32); -- sfix32_En32
  CONSTANT coeffphase1_6                  : signed(31 DOWNTO 0) := to_signed(155032944, 32); -- sfix32_En32
  CONSTANT coeffphase1_7                  : signed(31 DOWNTO 0) := to_signed(-281016993, 32); -- sfix32_En32
  CONSTANT coeffphase1_8                  : signed(31 DOWNTO 0) := to_signed(387386168, 32); -- sfix32_En32
  CONSTANT coeffphase1_9                  : signed(31 DOWNTO 0) := to_signed(1716504348, 32); -- sfix32_En32
  CONSTANT coeffphase1_10                 : signed(31 DOWNTO 0) := to_signed(387386168, 32); -- sfix32_En32
  CONSTANT coeffphase1_11                 : signed(31 DOWNTO 0) := to_signed(-281016993, 32); -- sfix32_En32
  CONSTANT coeffphase1_12                 : signed(31 DOWNTO 0) := to_signed(155032944, 32); -- sfix32_En32
  CONSTANT coeffphase1_13                 : signed(31 DOWNTO 0) := to_signed(-54194786, 32); -- sfix32_En32
  CONSTANT coeffphase1_14                 : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase1_15                 : signed(31 DOWNTO 0) := to_signed(14367030, 32); -- sfix32_En32
  CONSTANT coeffphase1_16                 : signed(31 DOWNTO 0) := to_signed(-10672579, 32); -- sfix32_En32
  CONSTANT coeffphase1_17                 : signed(31 DOWNTO 0) := to_signed(6495482, 32); -- sfix32_En32
  CONSTANT coeffphase2_1                  : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase2_2                  : signed(31 DOWNTO 0) := to_signed(-9728750, 32); -- sfix32_En32
  CONSTANT coeffphase2_3                  : signed(31 DOWNTO 0) := to_signed(33591998, 32); -- sfix32_En32
  CONSTANT coeffphase2_4                  : signed(31 DOWNTO 0) := to_signed(-64992124, 32); -- sfix32_En32
  CONSTANT coeffphase2_5                  : signed(31 DOWNTO 0) := to_signed(72230070, 32); -- sfix32_En32
  CONSTANT coeffphase2_6                  : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase2_7                  : signed(31 DOWNTO 0) := to_signed(-246880939, 32); -- sfix32_En32
  CONSTANT coeffphase2_8                  : signed(31 DOWNTO 0) := to_signed(1287613955, 32); -- sfix32_En32
  CONSTANT coeffphase2_9                  : signed(31 DOWNTO 0) := to_signed(1287613955, 32); -- sfix32_En32
  CONSTANT coeffphase2_10                 : signed(31 DOWNTO 0) := to_signed(-246880939, 32); -- sfix32_En32
  CONSTANT coeffphase2_11                 : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase2_12                 : signed(31 DOWNTO 0) := to_signed(72230070, 32); -- sfix32_En32
  CONSTANT coeffphase2_13                 : signed(31 DOWNTO 0) := to_signed(-64992124, 32); -- sfix32_En32
  CONSTANT coeffphase2_14                 : signed(31 DOWNTO 0) := to_signed(33591998, 32); -- sfix32_En32
  CONSTANT coeffphase2_15                 : signed(31 DOWNTO 0) := to_signed(-9728750, 32); -- sfix32_En32
  CONSTANT coeffphase2_16                 : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase2_17                 : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32

  CONSTANT const_zero                     : signed(64 DOWNTO 0) := to_signed(0, 65); -- sfix65_En60
  -- Signals
  SIGNAL cur_count                        : unsigned(3 DOWNTO 0); -- ufix4
  SIGNAL phase_0                          : std_logic; -- boolean
  SIGNAL phase_1                          : std_logic; -- boolean
  SIGNAL phase_8                          : std_logic; -- boolean
  SIGNAL phase_9                          : std_logic; -- boolean
  SIGNAL phase_temp                       : std_logic; -- boolean
  SIGNAL phase_reg_temp                   : std_logic; -- boolean
  SIGNAL phase_reg                        : std_logic; -- boolean
  SIGNAL int_delay_pipe                   : std_logic_vector(0 TO 15); -- boolean
  SIGNAL input_register                   : signed(31 DOWNTO 0); -- sfix32_En28
  SIGNAL input_pipeline_phase0            : input_pipeline_type(0 TO 16); -- sfix32_En28
  SIGNAL input_pipeline_phase1            : input_pipeline_type(0 TO 16); -- sfix32_En28
  SIGNAL tapsum_0_0and0_16                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_1and0_15                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_2and0_14                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_4and0_12                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_5and0_11                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_6and0_10                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_7and0_9                 : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_1and1_14                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_2and1_13                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_3and1_12                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_4and1_11                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_6and1_9                 : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_7and1_8                 : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL input_pipeline_phase08_cast      : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL inputmux                         : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL product                          : signed(64 DOWNTO 0); -- sfix65_En60
  SIGNAL product_mux                      : signed(31 DOWNTO 0); -- sfix32_En32
  SIGNAL phasemux                         : signed(64 DOWNTO 0); -- sfix65_En60
  SIGNAL sumofproducts                    : signed(64 DOWNTO 0); -- sfix65_En60
  SIGNAL sumofproducts_cast               : signed(71 DOWNTO 0); -- sfix72_En60
  SIGNAL acc_sum                          : signed(71 DOWNTO 0); -- sfix72_En60
  SIGNAL accreg_in                        : signed(71 DOWNTO 0); -- sfix72_En60
  SIGNAL accreg_out                       : signed(71 DOWNTO 0); -- sfix72_En60
  SIGNAL add_temp                         : signed(72 DOWNTO 0); -- sfix73_En60
  SIGNAL accreg_final                     : signed(71 DOWNTO 0); -- sfix72_En60
  SIGNAL output_typeconvert               : signed(68 DOWNTO 0); -- sfix69_En60
  SIGNAL output_register                  : signed(68 DOWNTO 0); -- sfix69_En60


BEGIN

  -- Block Statements
  Counter : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cur_count <= to_unsigned(15, 4);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF cur_count = to_unsigned(15, 4) THEN
          cur_count <= to_unsigned(0, 4);
        ELSE
          cur_count <= cur_count + to_unsigned(1, 4);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter;

  phase_0 <= '1' WHEN cur_count = to_unsigned(0, 4) AND clk_enable = '1' ELSE '0';

  phase_1 <= '1' WHEN  (((cur_count = to_unsigned(1, 4))  OR
                         (cur_count = to_unsigned(2, 4))  OR
                         (cur_count = to_unsigned(3, 4))  OR
                         (cur_count = to_unsigned(4, 4))  OR
                         (cur_count = to_unsigned(5, 4))  OR
                         (cur_count = to_unsigned(6, 4))  OR
                         (cur_count = to_unsigned(7, 4))  OR
                         (cur_count = to_unsigned(8, 4))  OR
                         (cur_count = to_unsigned(9, 4))  OR
                         (cur_count = to_unsigned(10, 4))  OR
                         (cur_count = to_unsigned(11, 4))  OR
                         (cur_count = to_unsigned(12, 4))  OR
                         (cur_count = to_unsigned(13, 4))  OR
                         (cur_count = to_unsigned(14, 4)))  AND clk_enable = '1') ELSE '0';

  phase_8 <= '1' WHEN cur_count = to_unsigned(8, 4) AND clk_enable = '1' ELSE '0';

  phase_9 <= '1' WHEN cur_count = to_unsigned(9, 4) AND clk_enable = '1' ELSE '0';

  phase_temp <=  phase_0 AND const_one;

  ceout_delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      int_delay_pipe <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        int_delay_pipe(1 TO 15) <= int_delay_pipe(0 TO 14);
        int_delay_pipe(0) <= phase_temp;
      END IF;
    END IF;
  END PROCESS ceout_delay_process;
  phase_reg_temp <= int_delay_pipe(15);

  phase_reg <=  phase_reg_temp AND phase_temp;

  input_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        input_register <= signed(filter_in);
      END IF;
    END IF; 
  END PROCESS input_reg_process;

  Delay_Pipeline_Phase0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase0(0 TO 16) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        input_pipeline_phase0(0) <= input_register;
        input_pipeline_phase0(1 TO 16) <= input_pipeline_phase0(0 TO 15);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase0_process;

  Delay_Pipeline_Phase1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase1(0 TO 16) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_8 = '1' THEN
        input_pipeline_phase1(0) <= input_register;
        input_pipeline_phase1(1 TO 16) <= input_pipeline_phase1(0 TO 15);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase1_process;

  -- Adding (or subtracting) the taps based on the symmetry (or asymmetry)

  tapsum_0_0and0_16 <= resize(input_pipeline_phase0(0), 33) + resize(input_pipeline_phase0(16), 33);

  tapsum_0_1and0_15 <= resize(input_pipeline_phase0(1), 33) + resize(input_pipeline_phase0(15), 33);

  tapsum_0_2and0_14 <= resize(input_pipeline_phase0(2), 33) + resize(input_pipeline_phase0(14), 33);

  tapsum_0_4and0_12 <= resize(input_pipeline_phase0(4), 33) + resize(input_pipeline_phase0(12), 33);

  tapsum_0_5and0_11 <= resize(input_pipeline_phase0(5), 33) + resize(input_pipeline_phase0(11), 33);

  tapsum_0_6and0_10 <= resize(input_pipeline_phase0(6), 33) + resize(input_pipeline_phase0(10), 33);

  tapsum_0_7and0_9 <= resize(input_pipeline_phase0(7), 33) + resize(input_pipeline_phase0(9), 33);

  tapsum_1_1and1_14 <= resize(input_pipeline_phase1(1), 33) + resize(input_pipeline_phase1(14), 33);

  tapsum_1_2and1_13 <= resize(input_pipeline_phase1(2), 33) + resize(input_pipeline_phase1(13), 33);

  tapsum_1_3and1_12 <= resize(input_pipeline_phase1(3), 33) + resize(input_pipeline_phase1(12), 33);

  tapsum_1_4and1_11 <= resize(input_pipeline_phase1(4), 33) + resize(input_pipeline_phase1(11), 33);

  tapsum_1_6and1_9 <= resize(input_pipeline_phase1(6), 33) + resize(input_pipeline_phase1(9), 33);

  tapsum_1_7and1_8 <= resize(input_pipeline_phase1(7), 33) + resize(input_pipeline_phase1(8), 33);

  -- Mux(es) to select the input taps for multipliers 

  input_pipeline_phase08_cast <= resize(input_pipeline_phase0(8), 33);

  inputmux <= tapsum_0_0and0_16 WHEN ( cur_count = to_unsigned(1, 4) ) ELSE
                   tapsum_0_1and0_15 WHEN ( cur_count = to_unsigned(2, 4) ) ELSE
                   tapsum_0_2and0_14 WHEN ( cur_count = to_unsigned(3, 4) ) ELSE
                   tapsum_0_4and0_12 WHEN ( cur_count = to_unsigned(4, 4) ) ELSE
                   tapsum_0_5and0_11 WHEN ( cur_count = to_unsigned(5, 4) ) ELSE
                   tapsum_0_6and0_10 WHEN ( cur_count = to_unsigned(6, 4) ) ELSE
                   tapsum_0_7and0_9 WHEN ( cur_count = to_unsigned(7, 4) ) ELSE
                   input_pipeline_phase08_cast WHEN ( cur_count = to_unsigned(8, 4) ) ELSE
                   tapsum_1_1and1_14 WHEN ( cur_count = to_unsigned(9, 4) ) ELSE
                   tapsum_1_2and1_13 WHEN ( cur_count = to_unsigned(10, 4) ) ELSE
                   tapsum_1_3and1_12 WHEN ( cur_count = to_unsigned(11, 4) ) ELSE
                   tapsum_1_4and1_11 WHEN ( cur_count = to_unsigned(12, 4) ) ELSE
                   tapsum_1_6and1_9 WHEN ( cur_count = to_unsigned(13, 4) ) ELSE
                   tapsum_1_7and1_8;

  product_mux <= coeffphase1_1 WHEN ( cur_count = to_unsigned(1, 4) ) ELSE
                      coeffphase1_2 WHEN ( cur_count = to_unsigned(2, 4) ) ELSE
                      coeffphase1_3 WHEN ( cur_count = to_unsigned(3, 4) ) ELSE
                      coeffphase1_5 WHEN ( cur_count = to_unsigned(4, 4) ) ELSE
                      coeffphase1_6 WHEN ( cur_count = to_unsigned(5, 4) ) ELSE
                      coeffphase1_7 WHEN ( cur_count = to_unsigned(6, 4) ) ELSE
                      coeffphase1_8 WHEN ( cur_count = to_unsigned(7, 4) ) ELSE
                      coeffphase1_9 WHEN ( cur_count = to_unsigned(8, 4) ) ELSE
                      coeffphase2_2 WHEN ( cur_count = to_unsigned(9, 4) ) ELSE
                      coeffphase2_3 WHEN ( cur_count = to_unsigned(10, 4) ) ELSE
                      coeffphase2_4 WHEN ( cur_count = to_unsigned(11, 4) ) ELSE
                      coeffphase2_5 WHEN ( cur_count = to_unsigned(12, 4) ) ELSE
                      coeffphase2_7 WHEN ( cur_count = to_unsigned(13, 4) ) ELSE
                      coeffphase2_8;
  product <= inputmux * product_mux;

  phasemux <= product WHEN ( phase_1 = '1' ) ELSE
                   const_zero;


  -- Add the products in linear fashion

  sumofproducts <= phasemux;

  -- Resize the sum of products to the accumulator type for full precision addition

  sumofproducts_cast <= resize(sumofproducts, 72);

  -- Accumulator register with a mux to reset it with the first addend

  add_temp <= resize(sumofproducts_cast, 73) + resize(accreg_out, 73);
  acc_sum <= add_temp(71 DOWNTO 0);

  accreg_in <= sumofproducts_cast WHEN ( phase_9 = '1' ) ELSE
                    acc_sum;

  Acc_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      accreg_out <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        accreg_out <= accreg_in;
      END IF;
    END IF; 
  END PROCESS Acc_reg_process;

  -- Register to hold the final value of the accumulated sum

  Acc_finalreg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      accreg_final <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_9 = '1' THEN
        accreg_final <= accreg_out;
      END IF;
    END IF; 
  END PROCESS Acc_finalreg_process;

  output_typeconvert <= accreg_final(68 DOWNTO 0);

  output_register_process : PROCESS (clk1, reset1)
  BEGIN
    IF reset1 = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk1'event AND clk1 = '1' THEN
      IF clk_enable1 = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS output_register_process;

  -- Assignment Statements
  filter_out <= std_logic_vector(output_register);
END rtl;
