-- -------------------------------------------------------------
--
-- Module: FIR128_Bandpass_2K_4K_Fs12K
-- Generated by MATLAB(R) 9.2 and the Filter Design HDL Coder 3.1.1.
-- Generated on: 2017-06-11 11:09:38
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- Name: FIR128_Bandpass_2K_4K_Fs12K
-- SerialPartition: [32  13]
-- InputDataType: numerictype(1,32,28)
-- TestBenchName: firfilt_copy_tb
-- TestBenchStimulus: impulse step ramp chirp noise 

-- -------------------------------------------------------------
-- HDL Implementation    : Partly Serial
-- Folding Factor        : 32
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Filter (real)
-- -------------------------------
-- Filter Structure  : Direct-Form FIR
-- Filter Length     : 129
-- Stable            : Yes
-- Linear Phase      : Yes (Type 1)
-- Arithmetic        : fixed
-- Numerator         : s32,32 -> [-5.000000e-01 5.000000e-01)
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY FIR128_Bandpass_2K_4K_Fs12K IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(31 DOWNTO 0); -- sfix32_En28
         filter_out                      :   OUT   std_logic_vector(71 DOWNTO 0)  -- sfix72_En60
         );

END FIR128_Bandpass_2K_4K_Fs12K;


----------------------------------------------------------------
--Module Architecture: FIR128_Bandpass_2K_4K_Fs12K
----------------------------------------------------------------
ARCHITECTURE rtl OF FIR128_Bandpass_2K_4K_Fs12K IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(31 DOWNTO 0); -- sfix32_En28
  -- Constants
  CONSTANT coeff1                         : signed(31 DOWNTO 0) := to_signed(2956076, 32); -- sfix32_En32
  CONSTANT coeff2                         : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff3                         : signed(31 DOWNTO 0) := to_signed(-3135921, 32); -- sfix32_En32
  CONSTANT coeff4                         : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff5                         : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff6                         : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff7                         : signed(31 DOWNTO 0) := to_signed(4069495, 32); -- sfix32_En32
  CONSTANT coeff8                         : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff9                         : signed(31 DOWNTO 0) := to_signed(-4857061, 32); -- sfix32_En32
  CONSTANT coeff10                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff11                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff12                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff13                        : signed(31 DOWNTO 0) := to_signed(7163890, 32); -- sfix32_En32
  CONSTANT coeff14                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff15                        : signed(31 DOWNTO 0) := to_signed(-8722325, 32); -- sfix32_En32
  CONSTANT coeff16                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff17                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff18                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff19                        : signed(31 DOWNTO 0) := to_signed(12758890, 32); -- sfix32_En32
  CONSTANT coeff20                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff21                        : signed(31 DOWNTO 0) := to_signed(-15287625, 32); -- sfix32_En32
  CONSTANT coeff22                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff23                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff24                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff25                        : signed(31 DOWNTO 0) := to_signed(21518199, 32); -- sfix32_En32
  CONSTANT coeff26                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff27                        : signed(31 DOWNTO 0) := to_signed(-25295859, 32); -- sfix32_En32
  CONSTANT coeff28                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff29                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff30                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff31                        : signed(31 DOWNTO 0) := to_signed(34423476, 32); -- sfix32_En32
  CONSTANT coeff32                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff33                        : signed(31 DOWNTO 0) := to_signed(-39907023, 32); -- sfix32_En32
  CONSTANT coeff34                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff35                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff36                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff37                        : signed(31 DOWNTO 0) := to_signed(53187536, 32); -- sfix32_En32
  CONSTANT coeff38                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff39                        : signed(31 DOWNTO 0) := to_signed(-61261802, 32); -- sfix32_En32
  CONSTANT coeff40                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff41                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff42                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff43                        : signed(31 DOWNTO 0) := to_signed(81355775, 32); -- sfix32_En32
  CONSTANT coeff44                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff45                        : signed(31 DOWNTO 0) := to_signed(-94069700, 32); -- sfix32_En32
  CONSTANT coeff46                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff47                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff48                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff49                        : signed(31 DOWNTO 0) := to_signed(127890056, 32); -- sfix32_En32
  CONSTANT coeff50                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff51                        : signed(31 DOWNTO 0) := to_signed(-151280948, 32); -- sfix32_En32
  CONSTANT coeff52                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff53                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff54                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff55                        : signed(31 DOWNTO 0) := to_signed(223641036, 32); -- sfix32_En32
  CONSTANT coeff56                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff57                        : signed(31 DOWNTO 0) := to_signed(-285256759, 32); -- sfix32_En32
  CONSTANT coeff58                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff59                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff60                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff61                        : signed(31 DOWNTO 0) := to_signed(585989546, 32); -- sfix32_En32
  CONSTANT coeff62                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff63                        : signed(31 DOWNTO 0) := to_signed(-1179811209, 32); -- sfix32_En32
  CONSTANT coeff64                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff65                        : signed(31 DOWNTO 0) := to_signed(1429794245, 32); -- sfix32_En32
  CONSTANT coeff66                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff67                        : signed(31 DOWNTO 0) := to_signed(-1179811209, 32); -- sfix32_En32
  CONSTANT coeff68                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff69                        : signed(31 DOWNTO 0) := to_signed(585989546, 32); -- sfix32_En32
  CONSTANT coeff70                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff71                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff72                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff73                        : signed(31 DOWNTO 0) := to_signed(-285256759, 32); -- sfix32_En32
  CONSTANT coeff74                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff75                        : signed(31 DOWNTO 0) := to_signed(223641036, 32); -- sfix32_En32
  CONSTANT coeff76                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff77                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff78                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff79                        : signed(31 DOWNTO 0) := to_signed(-151280948, 32); -- sfix32_En32
  CONSTANT coeff80                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff81                        : signed(31 DOWNTO 0) := to_signed(127890056, 32); -- sfix32_En32
  CONSTANT coeff82                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff83                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff84                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff85                        : signed(31 DOWNTO 0) := to_signed(-94069700, 32); -- sfix32_En32
  CONSTANT coeff86                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff87                        : signed(31 DOWNTO 0) := to_signed(81355775, 32); -- sfix32_En32
  CONSTANT coeff88                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff89                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff90                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff91                        : signed(31 DOWNTO 0) := to_signed(-61261802, 32); -- sfix32_En32
  CONSTANT coeff92                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff93                        : signed(31 DOWNTO 0) := to_signed(53187536, 32); -- sfix32_En32
  CONSTANT coeff94                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff95                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff96                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff97                        : signed(31 DOWNTO 0) := to_signed(-39907023, 32); -- sfix32_En32
  CONSTANT coeff98                        : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff99                        : signed(31 DOWNTO 0) := to_signed(34423476, 32); -- sfix32_En32
  CONSTANT coeff100                       : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff101                       : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff102                       : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff103                       : signed(31 DOWNTO 0) := to_signed(-25295859, 32); -- sfix32_En32
  CONSTANT coeff104                       : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff105                       : signed(31 DOWNTO 0) := to_signed(21518199, 32); -- sfix32_En32
  CONSTANT coeff106                       : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff107                       : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff108                       : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff109                       : signed(31 DOWNTO 0) := to_signed(-15287625, 32); -- sfix32_En32
  CONSTANT coeff110                       : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff111                       : signed(31 DOWNTO 0) := to_signed(12758890, 32); -- sfix32_En32
  CONSTANT coeff112                       : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff113                       : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff114                       : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff115                       : signed(31 DOWNTO 0) := to_signed(-8722325, 32); -- sfix32_En32
  CONSTANT coeff116                       : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff117                       : signed(31 DOWNTO 0) := to_signed(7163890, 32); -- sfix32_En32
  CONSTANT coeff118                       : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff119                       : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff120                       : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff121                       : signed(31 DOWNTO 0) := to_signed(-4857061, 32); -- sfix32_En32
  CONSTANT coeff122                       : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff123                       : signed(31 DOWNTO 0) := to_signed(4069495, 32); -- sfix32_En32
  CONSTANT coeff124                       : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff125                       : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff126                       : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff127                       : signed(31 DOWNTO 0) := to_signed(-3135921, 32); -- sfix32_En32
  CONSTANT coeff128                       : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeff129                       : signed(31 DOWNTO 0) := to_signed(2956076, 32); -- sfix32_En32

  -- Signals
  SIGNAL cur_count                        : unsigned(4 DOWNTO 0); -- ufix5
  SIGNAL phase_31                         : std_logic; -- boolean
  SIGNAL phase_0                          : std_logic; -- boolean
  SIGNAL phase_1                          : std_logic; -- boolean
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 128); -- sfix32_En28
  SIGNAL inputmux_1                       : signed(31 DOWNTO 0); -- sfix32_En28
  SIGNAL inputmux_2                       : signed(31 DOWNTO 0); -- sfix32_En28
  SIGNAL acc_final                        : signed(71 DOWNTO 0); -- sfix72_En60
  SIGNAL acc_out_1                        : signed(71 DOWNTO 0); -- sfix72_En60
  SIGNAL product_1                        : signed(63 DOWNTO 0); -- sfix64_En60
  SIGNAL product_1_mux                    : signed(31 DOWNTO 0); -- sfix32_En32
  SIGNAL prod_typeconvert_1               : signed(71 DOWNTO 0); -- sfix72_En60
  SIGNAL acc_sum_1                        : signed(71 DOWNTO 0); -- sfix72_En60
  SIGNAL acc_in_1                         : signed(71 DOWNTO 0); -- sfix72_En60
  SIGNAL add_temp                         : signed(72 DOWNTO 0); -- sfix73_En60
  SIGNAL acc_out_2                        : signed(71 DOWNTO 0); -- sfix72_En60
  SIGNAL product_2                        : signed(63 DOWNTO 0); -- sfix64_En60
  SIGNAL product_2_mux                    : signed(31 DOWNTO 0); -- sfix32_En32
  SIGNAL prod_typeconvert_2               : signed(71 DOWNTO 0); -- sfix72_En60
  SIGNAL acc_sum_2                        : signed(71 DOWNTO 0); -- sfix72_En60
  SIGNAL acc_in_2                         : signed(71 DOWNTO 0); -- sfix72_En60
  SIGNAL add_temp_1                       : signed(72 DOWNTO 0); -- sfix73_En60
  SIGNAL sum1                             : signed(71 DOWNTO 0); -- sfix72_En60
  SIGNAL add_temp_2                       : signed(72 DOWNTO 0); -- sfix73_En60
  SIGNAL output_typeconvert               : signed(71 DOWNTO 0); -- sfix72_En60
  SIGNAL output_register                  : signed(71 DOWNTO 0); -- sfix72_En60


BEGIN

  -- Block Statements
  Counter_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cur_count <= to_unsigned(31, 5);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF cur_count = to_unsigned(31, 5) THEN
          cur_count <= to_unsigned(0, 5);
        ELSE
          cur_count <= cur_count + to_unsigned(1, 5);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter_process;

  phase_31 <= '1' WHEN cur_count = to_unsigned(31, 5) AND clk_enable = '1' ELSE '0';

  phase_0 <= '1' WHEN cur_count = to_unsigned(0, 5) AND clk_enable = '1' ELSE '0';

  phase_1 <= '1' WHEN  (((cur_count = to_unsigned(0, 5))  OR
                         (cur_count = to_unsigned(1, 5))  OR
                         (cur_count = to_unsigned(2, 5))  OR
                         (cur_count = to_unsigned(3, 5))  OR
                         (cur_count = to_unsigned(4, 5))  OR
                         (cur_count = to_unsigned(5, 5))  OR
                         (cur_count = to_unsigned(6, 5))  OR
                         (cur_count = to_unsigned(7, 5))  OR
                         (cur_count = to_unsigned(8, 5))  OR
                         (cur_count = to_unsigned(9, 5))  OR
                         (cur_count = to_unsigned(10, 5))  OR
                         (cur_count = to_unsigned(11, 5))  OR
                         (cur_count = to_unsigned(12, 5)))  AND clk_enable = '1') ELSE '0';

  Delay_Pipeline_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delay_pipeline(0 TO 128) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_31 = '1' THEN
        delay_pipeline(0) <= signed(filter_in);
        delay_pipeline(1 TO 128) <= delay_pipeline(0 TO 127);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  inputmux_1 <= delay_pipeline(0) WHEN ( cur_count = to_unsigned(0, 5) ) ELSE
                     delay_pipeline(2) WHEN ( cur_count = to_unsigned(1, 5) ) ELSE
                     delay_pipeline(6) WHEN ( cur_count = to_unsigned(2, 5) ) ELSE
                     delay_pipeline(8) WHEN ( cur_count = to_unsigned(3, 5) ) ELSE
                     delay_pipeline(12) WHEN ( cur_count = to_unsigned(4, 5) ) ELSE
                     delay_pipeline(14) WHEN ( cur_count = to_unsigned(5, 5) ) ELSE
                     delay_pipeline(18) WHEN ( cur_count = to_unsigned(6, 5) ) ELSE
                     delay_pipeline(20) WHEN ( cur_count = to_unsigned(7, 5) ) ELSE
                     delay_pipeline(24) WHEN ( cur_count = to_unsigned(8, 5) ) ELSE
                     delay_pipeline(26) WHEN ( cur_count = to_unsigned(9, 5) ) ELSE
                     delay_pipeline(30) WHEN ( cur_count = to_unsigned(10, 5) ) ELSE
                     delay_pipeline(32) WHEN ( cur_count = to_unsigned(11, 5) ) ELSE
                     delay_pipeline(36) WHEN ( cur_count = to_unsigned(12, 5) ) ELSE
                     delay_pipeline(38) WHEN ( cur_count = to_unsigned(13, 5) ) ELSE
                     delay_pipeline(42) WHEN ( cur_count = to_unsigned(14, 5) ) ELSE
                     delay_pipeline(44) WHEN ( cur_count = to_unsigned(15, 5) ) ELSE
                     delay_pipeline(48) WHEN ( cur_count = to_unsigned(16, 5) ) ELSE
                     delay_pipeline(50) WHEN ( cur_count = to_unsigned(17, 5) ) ELSE
                     delay_pipeline(54) WHEN ( cur_count = to_unsigned(18, 5) ) ELSE
                     delay_pipeline(56) WHEN ( cur_count = to_unsigned(19, 5) ) ELSE
                     delay_pipeline(60) WHEN ( cur_count = to_unsigned(20, 5) ) ELSE
                     delay_pipeline(62) WHEN ( cur_count = to_unsigned(21, 5) ) ELSE
                     delay_pipeline(64) WHEN ( cur_count = to_unsigned(22, 5) ) ELSE
                     delay_pipeline(66) WHEN ( cur_count = to_unsigned(23, 5) ) ELSE
                     delay_pipeline(68) WHEN ( cur_count = to_unsigned(24, 5) ) ELSE
                     delay_pipeline(72) WHEN ( cur_count = to_unsigned(25, 5) ) ELSE
                     delay_pipeline(74) WHEN ( cur_count = to_unsigned(26, 5) ) ELSE
                     delay_pipeline(78) WHEN ( cur_count = to_unsigned(27, 5) ) ELSE
                     delay_pipeline(80) WHEN ( cur_count = to_unsigned(28, 5) ) ELSE
                     delay_pipeline(84) WHEN ( cur_count = to_unsigned(29, 5) ) ELSE
                     delay_pipeline(86) WHEN ( cur_count = to_unsigned(30, 5) ) ELSE
                     delay_pipeline(90);

  inputmux_2 <= delay_pipeline(92) WHEN ( cur_count = to_unsigned(0, 5) ) ELSE
                     delay_pipeline(96) WHEN ( cur_count = to_unsigned(1, 5) ) ELSE
                     delay_pipeline(98) WHEN ( cur_count = to_unsigned(2, 5) ) ELSE
                     delay_pipeline(102) WHEN ( cur_count = to_unsigned(3, 5) ) ELSE
                     delay_pipeline(104) WHEN ( cur_count = to_unsigned(4, 5) ) ELSE
                     delay_pipeline(108) WHEN ( cur_count = to_unsigned(5, 5) ) ELSE
                     delay_pipeline(110) WHEN ( cur_count = to_unsigned(6, 5) ) ELSE
                     delay_pipeline(114) WHEN ( cur_count = to_unsigned(7, 5) ) ELSE
                     delay_pipeline(116) WHEN ( cur_count = to_unsigned(8, 5) ) ELSE
                     delay_pipeline(120) WHEN ( cur_count = to_unsigned(9, 5) ) ELSE
                     delay_pipeline(122) WHEN ( cur_count = to_unsigned(10, 5) ) ELSE
                     delay_pipeline(126) WHEN ( cur_count = to_unsigned(11, 5) ) ELSE
                     delay_pipeline(128);

  --   ------------------ Serial partition # 1 ------------------

  product_1_mux <= coeff1 WHEN ( cur_count = to_unsigned(0, 5) ) ELSE
                        coeff3 WHEN ( cur_count = to_unsigned(1, 5) ) ELSE
                        coeff7 WHEN ( cur_count = to_unsigned(2, 5) ) ELSE
                        coeff9 WHEN ( cur_count = to_unsigned(3, 5) ) ELSE
                        coeff13 WHEN ( cur_count = to_unsigned(4, 5) ) ELSE
                        coeff15 WHEN ( cur_count = to_unsigned(5, 5) ) ELSE
                        coeff19 WHEN ( cur_count = to_unsigned(6, 5) ) ELSE
                        coeff21 WHEN ( cur_count = to_unsigned(7, 5) ) ELSE
                        coeff25 WHEN ( cur_count = to_unsigned(8, 5) ) ELSE
                        coeff27 WHEN ( cur_count = to_unsigned(9, 5) ) ELSE
                        coeff31 WHEN ( cur_count = to_unsigned(10, 5) ) ELSE
                        coeff33 WHEN ( cur_count = to_unsigned(11, 5) ) ELSE
                        coeff37 WHEN ( cur_count = to_unsigned(12, 5) ) ELSE
                        coeff39 WHEN ( cur_count = to_unsigned(13, 5) ) ELSE
                        coeff43 WHEN ( cur_count = to_unsigned(14, 5) ) ELSE
                        coeff45 WHEN ( cur_count = to_unsigned(15, 5) ) ELSE
                        coeff49 WHEN ( cur_count = to_unsigned(16, 5) ) ELSE
                        coeff51 WHEN ( cur_count = to_unsigned(17, 5) ) ELSE
                        coeff55 WHEN ( cur_count = to_unsigned(18, 5) ) ELSE
                        coeff57 WHEN ( cur_count = to_unsigned(19, 5) ) ELSE
                        coeff61 WHEN ( cur_count = to_unsigned(20, 5) ) ELSE
                        coeff63 WHEN ( cur_count = to_unsigned(21, 5) ) ELSE
                        coeff65 WHEN ( cur_count = to_unsigned(22, 5) ) ELSE
                        coeff67 WHEN ( cur_count = to_unsigned(23, 5) ) ELSE
                        coeff69 WHEN ( cur_count = to_unsigned(24, 5) ) ELSE
                        coeff73 WHEN ( cur_count = to_unsigned(25, 5) ) ELSE
                        coeff75 WHEN ( cur_count = to_unsigned(26, 5) ) ELSE
                        coeff79 WHEN ( cur_count = to_unsigned(27, 5) ) ELSE
                        coeff81 WHEN ( cur_count = to_unsigned(28, 5) ) ELSE
                        coeff85 WHEN ( cur_count = to_unsigned(29, 5) ) ELSE
                        coeff87 WHEN ( cur_count = to_unsigned(30, 5) ) ELSE
                        coeff91;
  product_1 <= inputmux_1 * product_1_mux;

  prod_typeconvert_1 <= resize(product_1, 72);

  add_temp <= resize(prod_typeconvert_1, 73) + resize(acc_out_1, 73);
  acc_sum_1 <= add_temp(71 DOWNTO 0);

  acc_in_1 <= prod_typeconvert_1 WHEN ( phase_0 = '1' ) ELSE
                   acc_sum_1;

  Acc_reg_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      acc_out_1 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        acc_out_1 <= acc_in_1;
      END IF;
    END IF; 
  END PROCESS Acc_reg_1_process;

  --   ------------------ Serial partition # 2 ------------------

  product_2_mux <= coeff93 WHEN ( cur_count = to_unsigned(0, 5) ) ELSE
                        coeff97 WHEN ( cur_count = to_unsigned(1, 5) ) ELSE
                        coeff99 WHEN ( cur_count = to_unsigned(2, 5) ) ELSE
                        coeff103 WHEN ( cur_count = to_unsigned(3, 5) ) ELSE
                        coeff105 WHEN ( cur_count = to_unsigned(4, 5) ) ELSE
                        coeff109 WHEN ( cur_count = to_unsigned(5, 5) ) ELSE
                        coeff111 WHEN ( cur_count = to_unsigned(6, 5) ) ELSE
                        coeff115 WHEN ( cur_count = to_unsigned(7, 5) ) ELSE
                        coeff117 WHEN ( cur_count = to_unsigned(8, 5) ) ELSE
                        coeff121 WHEN ( cur_count = to_unsigned(9, 5) ) ELSE
                        coeff123 WHEN ( cur_count = to_unsigned(10, 5) ) ELSE
                        coeff127 WHEN ( cur_count = to_unsigned(11, 5) ) ELSE
                        coeff129;
  product_2 <= inputmux_2 * product_2_mux;

  prod_typeconvert_2 <= resize(product_2, 72);

  add_temp_1 <= resize(prod_typeconvert_2, 73) + resize(acc_out_2, 73);
  acc_sum_2 <= add_temp_1(71 DOWNTO 0);

  acc_in_2 <= prod_typeconvert_2 WHEN ( phase_0 = '1' ) ELSE
                   acc_sum_2;

  Acc_reg_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      acc_out_2 <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_1 = '1' THEN
        acc_out_2 <= acc_in_2;
      END IF;
    END IF; 
  END PROCESS Acc_reg_2_process;

  add_temp_2 <= resize(acc_out_2, 73) + resize(acc_out_1, 73);
  sum1 <= add_temp_2(71 DOWNTO 0);

  Finalsum_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      acc_final <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        acc_final <= sum1;
      END IF;
    END IF; 
  END PROCESS Finalsum_reg_process;

  output_typeconvert <= acc_final;

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_31 = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= std_logic_vector(output_register);
END rtl;
