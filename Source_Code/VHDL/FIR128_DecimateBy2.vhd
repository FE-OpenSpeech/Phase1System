-- -------------------------------------------------------------
--
-- Module: FIR128_DecimateBy2
-- Generated by MATLAB(R) 9.2 and the Filter Design HDL Coder 3.1.1.
-- Generated on: 2017-06-11 08:13:23
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- Name: FIR128_DecimateBy2
-- SerialPartition: [16  16]
-- InputDataType: numerictype(1,32,28)
-- TestBenchName: firdecim_copy_tb
-- TestBenchStimulus: step ramp chirp noise 

-- -------------------------------------------------------------
-- HDL Implementation    : Partly Serial
-- Folding Factor        : 16
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure   : Direct-Form FIR Polyphase Decimator
-- Decimation Factor  : 2
-- Polyphase Length   : 65
-- Filter Length      : 129
-- Stable             : Yes
-- Linear Phase       : Yes (Type 1)
--
-- Arithmetic         : fixed
-- Numerator          : s32,32 -> [-5.000000e-01 5.000000e-01)
-- -------------------------------------------------------------



LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY FIR128_DecimateBy2 IS
   PORT( clk                             :   IN    std_logic; 
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(31 DOWNTO 0); -- sfix32_En28
         filter_out                      :   OUT   std_logic_vector(70 DOWNTO 0); -- sfix71_En60
         ce_out                          :   OUT   std_logic  
         );

END FIR128_DecimateBy2;


----------------------------------------------------------------
--Module Architecture: FIR128_DecimateBy2
----------------------------------------------------------------
ARCHITECTURE rtl OF FIR128_DecimateBy2 IS
  -- Local Functions
  -- Type Definitions
  TYPE input_pipeline_type IS ARRAY (NATURAL range <>) OF signed(31 DOWNTO 0); -- sfix32_En28
  -- Constants
  CONSTANT const_one                      : std_logic := '1'; -- boolean
  CONSTANT coeffphase1_1                  : signed(31 DOWNTO 0) := to_signed(1315991, 32); -- sfix32_En32
  CONSTANT coeffphase1_2                  : signed(31 DOWNTO 0) := to_signed(-1240297, 32); -- sfix32_En32
  CONSTANT coeffphase1_3                  : signed(31 DOWNTO 0) := to_signed(1189139, 32); -- sfix32_En32
  CONSTANT coeffphase1_4                  : signed(31 DOWNTO 0) := to_signed(-1132720, 32); -- sfix32_En32
  CONSTANT coeffphase1_5                  : signed(31 DOWNTO 0) := to_signed(1033060, 32); -- sfix32_En32
  CONSTANT coeffphase1_6                  : signed(31 DOWNTO 0) := to_signed(-845192, 32); -- sfix32_En32
  CONSTANT coeffphase1_7                  : signed(31 DOWNTO 0) := to_signed(518767, 32); -- sfix32_En32
  CONSTANT coeffphase1_8                  : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase1_9                  : signed(31 DOWNTO 0) := to_signed(-766094, 32); -- sfix32_En32
  CONSTANT coeffphase1_10                 : signed(31 DOWNTO 0) := to_signed(1833277, 32); -- sfix32_En32
  CONSTANT coeffphase1_11                 : signed(31 DOWNTO 0) := to_signed(-3251561, 32); -- sfix32_En32
  CONSTANT coeffphase1_12                 : signed(31 DOWNTO 0) := to_signed(5064688, 32); -- sfix32_En32
  CONSTANT coeffphase1_13                 : signed(31 DOWNTO 0) := to_signed(-7307718, 32); -- sfix32_En32
  CONSTANT coeffphase1_14                 : signed(31 DOWNTO 0) := to_signed(10004835, 32); -- sfix32_En32
  CONSTANT coeffphase1_15                 : signed(31 DOWNTO 0) := to_signed(-13167465, 32); -- sfix32_En32
  CONSTANT coeffphase1_16                 : signed(31 DOWNTO 0) := to_signed(16792796, 32); -- sfix32_En32
  CONSTANT coeffphase1_17                 : signed(31 DOWNTO 0) := to_signed(-20862774, 32); -- sfix32_En32
  CONSTANT coeffphase1_18                 : signed(31 DOWNTO 0) := to_signed(25343633, 32); -- sfix32_En32
  CONSTANT coeffphase1_19                 : signed(31 DOWNTO 0) := to_signed(-30185997, 32); -- sfix32_En32
  CONSTANT coeffphase1_20                 : signed(31 DOWNTO 0) := to_signed(35325562, 32); -- sfix32_En32
  CONSTANT coeffphase1_21                 : signed(31 DOWNTO 0) := to_signed(-40684362, 32); -- sfix32_En32
  CONSTANT coeffphase1_22                 : signed(31 DOWNTO 0) := to_signed(46172569, 32); -- sfix32_En32
  CONSTANT coeffphase1_23                 : signed(31 DOWNTO 0) := to_signed(-51690797, 32); -- sfix32_En32
  CONSTANT coeffphase1_24                 : signed(31 DOWNTO 0) := to_signed(57132813, 32); -- sfix32_En32
  CONSTANT coeffphase1_25                 : signed(31 DOWNTO 0) := to_signed(-62388577, 32); -- sfix32_En32
  CONSTANT coeffphase1_26                 : signed(31 DOWNTO 0) := to_signed(67347502, 32); -- sfix32_En32
  CONSTANT coeffphase1_27                 : signed(31 DOWNTO 0) := to_signed(-71901819, 32); -- sfix32_En32
  CONSTANT coeffphase1_28                 : signed(31 DOWNTO 0) := to_signed(75949921, 32); -- sfix32_En32
  CONSTANT coeffphase1_29                 : signed(31 DOWNTO 0) := to_signed(-79399565, 32); -- sfix32_En32
  CONSTANT coeffphase1_30                 : signed(31 DOWNTO 0) := to_signed(82170823, 32); -- sfix32_En32
  CONSTANT coeffphase1_31                 : signed(31 DOWNTO 0) := to_signed(-84198652, 32); -- sfix32_En32
  CONSTANT coeffphase1_32                 : signed(31 DOWNTO 0) := to_signed(85435017, 32); -- sfix32_En32
  CONSTANT coeffphase1_33                 : signed(31 DOWNTO 0) := to_signed(2060410771, 32); -- sfix32_En32
  CONSTANT coeffphase1_34                 : signed(31 DOWNTO 0) := to_signed(85435017, 32); -- sfix32_En32
  CONSTANT coeffphase1_35                 : signed(31 DOWNTO 0) := to_signed(-84198652, 32); -- sfix32_En32
  CONSTANT coeffphase1_36                 : signed(31 DOWNTO 0) := to_signed(82170823, 32); -- sfix32_En32
  CONSTANT coeffphase1_37                 : signed(31 DOWNTO 0) := to_signed(-79399565, 32); -- sfix32_En32
  CONSTANT coeffphase1_38                 : signed(31 DOWNTO 0) := to_signed(75949921, 32); -- sfix32_En32
  CONSTANT coeffphase1_39                 : signed(31 DOWNTO 0) := to_signed(-71901819, 32); -- sfix32_En32
  CONSTANT coeffphase1_40                 : signed(31 DOWNTO 0) := to_signed(67347502, 32); -- sfix32_En32
  CONSTANT coeffphase1_41                 : signed(31 DOWNTO 0) := to_signed(-62388577, 32); -- sfix32_En32
  CONSTANT coeffphase1_42                 : signed(31 DOWNTO 0) := to_signed(57132813, 32); -- sfix32_En32
  CONSTANT coeffphase1_43                 : signed(31 DOWNTO 0) := to_signed(-51690797, 32); -- sfix32_En32
  CONSTANT coeffphase1_44                 : signed(31 DOWNTO 0) := to_signed(46172569, 32); -- sfix32_En32
  CONSTANT coeffphase1_45                 : signed(31 DOWNTO 0) := to_signed(-40684362, 32); -- sfix32_En32
  CONSTANT coeffphase1_46                 : signed(31 DOWNTO 0) := to_signed(35325562, 32); -- sfix32_En32
  CONSTANT coeffphase1_47                 : signed(31 DOWNTO 0) := to_signed(-30185997, 32); -- sfix32_En32
  CONSTANT coeffphase1_48                 : signed(31 DOWNTO 0) := to_signed(25343633, 32); -- sfix32_En32
  CONSTANT coeffphase1_49                 : signed(31 DOWNTO 0) := to_signed(-20862774, 32); -- sfix32_En32
  CONSTANT coeffphase1_50                 : signed(31 DOWNTO 0) := to_signed(16792796, 32); -- sfix32_En32
  CONSTANT coeffphase1_51                 : signed(31 DOWNTO 0) := to_signed(-13167465, 32); -- sfix32_En32
  CONSTANT coeffphase1_52                 : signed(31 DOWNTO 0) := to_signed(10004835, 32); -- sfix32_En32
  CONSTANT coeffphase1_53                 : signed(31 DOWNTO 0) := to_signed(-7307718, 32); -- sfix32_En32
  CONSTANT coeffphase1_54                 : signed(31 DOWNTO 0) := to_signed(5064688, 32); -- sfix32_En32
  CONSTANT coeffphase1_55                 : signed(31 DOWNTO 0) := to_signed(-3251561, 32); -- sfix32_En32
  CONSTANT coeffphase1_56                 : signed(31 DOWNTO 0) := to_signed(1833277, 32); -- sfix32_En32
  CONSTANT coeffphase1_57                 : signed(31 DOWNTO 0) := to_signed(-766094, 32); -- sfix32_En32
  CONSTANT coeffphase1_58                 : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase1_59                 : signed(31 DOWNTO 0) := to_signed(518767, 32); -- sfix32_En32
  CONSTANT coeffphase1_60                 : signed(31 DOWNTO 0) := to_signed(-845192, 32); -- sfix32_En32
  CONSTANT coeffphase1_61                 : signed(31 DOWNTO 0) := to_signed(1033060, 32); -- sfix32_En32
  CONSTANT coeffphase1_62                 : signed(31 DOWNTO 0) := to_signed(-1132720, 32); -- sfix32_En32
  CONSTANT coeffphase1_63                 : signed(31 DOWNTO 0) := to_signed(1189139, 32); -- sfix32_En32
  CONSTANT coeffphase1_64                 : signed(31 DOWNTO 0) := to_signed(-1240297, 32); -- sfix32_En32
  CONSTANT coeffphase1_65                 : signed(31 DOWNTO 0) := to_signed(1315991, 32); -- sfix32_En32
  CONSTANT coeffphase2_1                  : signed(31 DOWNTO 0) := to_signed(1195950, 32); -- sfix32_En32
  CONSTANT coeffphase2_2                  : signed(31 DOWNTO 0) := to_signed(-1466640, 32); -- sfix32_En32
  CONSTANT coeffphase2_3                  : signed(31 DOWNTO 0) := to_signed(1833826, 32); -- sfix32_En32
  CONSTANT coeffphase2_4                  : signed(31 DOWNTO 0) := to_signed(-2318406, 32); -- sfix32_En32
  CONSTANT coeffphase2_5                  : signed(31 DOWNTO 0) := to_signed(2933630, 32); -- sfix32_En32
  CONSTANT coeffphase2_6                  : signed(31 DOWNTO 0) := to_signed(-3683186, 32); -- sfix32_En32
  CONSTANT coeffphase2_7                  : signed(31 DOWNTO 0) := to_signed(4559546, 32); -- sfix32_En32
  CONSTANT coeffphase2_8                  : signed(31 DOWNTO 0) := to_signed(-5542636, 32); -- sfix32_En32
  CONSTANT coeffphase2_9                  : signed(31 DOWNTO 0) := to_signed(6598894, 32); -- sfix32_En32
  CONSTANT coeffphase2_10                 : signed(31 DOWNTO 0) := to_signed(-7680734, 32); -- sfix32_En32
  CONSTANT coeffphase2_11                 : signed(31 DOWNTO 0) := to_signed(8726433, 32); -- sfix32_En32
  CONSTANT coeffphase2_12                 : signed(31 DOWNTO 0) := to_signed(-9660397, 32); -- sfix32_En32
  CONSTANT coeffphase2_13                 : signed(31 DOWNTO 0) := to_signed(10393780, 32); -- sfix32_En32
  CONSTANT coeffphase2_14                 : signed(31 DOWNTO 0) := to_signed(-10825314, 32); -- sfix32_En32
  CONSTANT coeffphase2_15                 : signed(31 DOWNTO 0) := to_signed(10842235, 32); -- sfix32_En32
  CONSTANT coeffphase2_16                 : signed(31 DOWNTO 0) := to_signed(-10321064, 32); -- sfix32_En32
  CONSTANT coeffphase2_17                 : signed(31 DOWNTO 0) := to_signed(9127950, 32); -- sfix32_En32
  CONSTANT coeffphase2_18                 : signed(31 DOWNTO 0) := to_signed(-7118136, 32); -- sfix32_En32
  CONSTANT coeffphase2_19                 : signed(31 DOWNTO 0) := to_signed(4133902, 32); -- sfix32_En32
  CONSTANT coeffphase2_20                 : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase2_21                 : signed(31 DOWNTO 0) := to_signed(-5485008, 32); -- sfix32_En32
  CONSTANT coeffphase2_22                 : signed(31 DOWNTO 0) := to_signed(12564230, 32); -- sfix32_En32
  CONSTANT coeffphase2_23                 : signed(31 DOWNTO 0) := to_signed(-21549632, 32); -- sfix32_En32
  CONSTANT coeffphase2_24                 : signed(31 DOWNTO 0) := to_signed(32870333, 32); -- sfix32_En32
  CONSTANT coeffphase2_25                 : signed(31 DOWNTO 0) := to_signed(-47161318, 32); -- sfix32_En32
  CONSTANT coeffphase2_26                 : signed(31 DOWNTO 0) := to_signed(65435538, 32); -- sfix32_En32
  CONSTANT coeffphase2_27                 : signed(31 DOWNTO 0) := to_signed(-89444793, 32); -- sfix32_En32
  CONSTANT coeffphase2_28                 : signed(31 DOWNTO 0) := to_signed(122522065, 32); -- sfix32_En32
  CONSTANT coeffphase2_29                 : signed(31 DOWNTO 0) := to_signed(-171866920, 32); -- sfix32_En32
  CONSTANT coeffphase2_30                 : signed(31 DOWNTO 0) := to_signed(256312834, 32); -- sfix32_En32
  CONSTANT coeffphase2_31                 : signed(31 DOWNTO 0) := to_signed(-445156056, 32); -- sfix32_En32
  CONSTANT coeffphase2_32                 : signed(31 DOWNTO 0) := to_signed(1362900556, 32); -- sfix32_En32
  CONSTANT coeffphase2_33                 : signed(31 DOWNTO 0) := to_signed(1362900556, 32); -- sfix32_En32
  CONSTANT coeffphase2_34                 : signed(31 DOWNTO 0) := to_signed(-445156056, 32); -- sfix32_En32
  CONSTANT coeffphase2_35                 : signed(31 DOWNTO 0) := to_signed(256312834, 32); -- sfix32_En32
  CONSTANT coeffphase2_36                 : signed(31 DOWNTO 0) := to_signed(-171866920, 32); -- sfix32_En32
  CONSTANT coeffphase2_37                 : signed(31 DOWNTO 0) := to_signed(122522065, 32); -- sfix32_En32
  CONSTANT coeffphase2_38                 : signed(31 DOWNTO 0) := to_signed(-89444793, 32); -- sfix32_En32
  CONSTANT coeffphase2_39                 : signed(31 DOWNTO 0) := to_signed(65435538, 32); -- sfix32_En32
  CONSTANT coeffphase2_40                 : signed(31 DOWNTO 0) := to_signed(-47161318, 32); -- sfix32_En32
  CONSTANT coeffphase2_41                 : signed(31 DOWNTO 0) := to_signed(32870333, 32); -- sfix32_En32
  CONSTANT coeffphase2_42                 : signed(31 DOWNTO 0) := to_signed(-21549632, 32); -- sfix32_En32
  CONSTANT coeffphase2_43                 : signed(31 DOWNTO 0) := to_signed(12564230, 32); -- sfix32_En32
  CONSTANT coeffphase2_44                 : signed(31 DOWNTO 0) := to_signed(-5485008, 32); -- sfix32_En32
  CONSTANT coeffphase2_45                 : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase2_46                 : signed(31 DOWNTO 0) := to_signed(4133902, 32); -- sfix32_En32
  CONSTANT coeffphase2_47                 : signed(31 DOWNTO 0) := to_signed(-7118136, 32); -- sfix32_En32
  CONSTANT coeffphase2_48                 : signed(31 DOWNTO 0) := to_signed(9127950, 32); -- sfix32_En32
  CONSTANT coeffphase2_49                 : signed(31 DOWNTO 0) := to_signed(-10321064, 32); -- sfix32_En32
  CONSTANT coeffphase2_50                 : signed(31 DOWNTO 0) := to_signed(10842235, 32); -- sfix32_En32
  CONSTANT coeffphase2_51                 : signed(31 DOWNTO 0) := to_signed(-10825314, 32); -- sfix32_En32
  CONSTANT coeffphase2_52                 : signed(31 DOWNTO 0) := to_signed(10393780, 32); -- sfix32_En32
  CONSTANT coeffphase2_53                 : signed(31 DOWNTO 0) := to_signed(-9660397, 32); -- sfix32_En32
  CONSTANT coeffphase2_54                 : signed(31 DOWNTO 0) := to_signed(8726433, 32); -- sfix32_En32
  CONSTANT coeffphase2_55                 : signed(31 DOWNTO 0) := to_signed(-7680734, 32); -- sfix32_En32
  CONSTANT coeffphase2_56                 : signed(31 DOWNTO 0) := to_signed(6598894, 32); -- sfix32_En32
  CONSTANT coeffphase2_57                 : signed(31 DOWNTO 0) := to_signed(-5542636, 32); -- sfix32_En32
  CONSTANT coeffphase2_58                 : signed(31 DOWNTO 0) := to_signed(4559546, 32); -- sfix32_En32
  CONSTANT coeffphase2_59                 : signed(31 DOWNTO 0) := to_signed(-3683186, 32); -- sfix32_En32
  CONSTANT coeffphase2_60                 : signed(31 DOWNTO 0) := to_signed(2933630, 32); -- sfix32_En32
  CONSTANT coeffphase2_61                 : signed(31 DOWNTO 0) := to_signed(-2318406, 32); -- sfix32_En32
  CONSTANT coeffphase2_62                 : signed(31 DOWNTO 0) := to_signed(1833826, 32); -- sfix32_En32
  CONSTANT coeffphase2_63                 : signed(31 DOWNTO 0) := to_signed(-1466640, 32); -- sfix32_En32
  CONSTANT coeffphase2_64                 : signed(31 DOWNTO 0) := to_signed(1195950, 32); -- sfix32_En32
  CONSTANT coeffphase2_65                 : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32

  CONSTANT const_zero                     : signed(64 DOWNTO 0) := to_signed(0, 65); -- sfix65_En60
  -- Signals
  SIGNAL cur_count                        : unsigned(4 DOWNTO 0); -- ufix5
  SIGNAL phase_0                          : std_logic; -- boolean
  SIGNAL phase_1                          : std_logic; -- boolean
  SIGNAL phase_16                         : std_logic; -- boolean
  SIGNAL phase_17                         : std_logic; -- boolean
  SIGNAL phase_temp                       : std_logic; -- boolean
  SIGNAL phase_reg_temp                   : std_logic; -- boolean
  SIGNAL phase_reg                        : std_logic; -- boolean
  SIGNAL int_delay_pipe                   : std_logic_vector(0 TO 31); -- boolean
  SIGNAL ce_out_reg                       : std_logic; -- boolean
  SIGNAL input_register                   : signed(31 DOWNTO 0); -- sfix32_En28
  SIGNAL input_pipeline_phase0            : input_pipeline_type(0 TO 64); -- sfix32_En28
  SIGNAL input_pipeline_phase1            : input_pipeline_type(0 TO 64); -- sfix32_En28
  SIGNAL tapsum_0_6and0_58                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_8and0_56                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_5and0_59                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_4and0_60                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_3and0_61                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_2and0_62                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_1and0_63                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_0and0_64                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_9and0_55                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_10and0_54               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_11and0_53               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_12and0_52               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_13and0_51               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_14and0_50               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_15and0_49               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_16and0_48               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_17and0_47               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_18and0_46               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_19and0_45               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_20and0_44               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_21and0_43               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_22and0_42               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_23and0_41               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_24and0_40               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_25and0_39               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_26and0_38               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_27and0_37               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_28and0_36               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_29and0_35               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_30and0_34               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_0_31and0_33               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_0and1_63                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_1and1_62                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_2and1_61                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_3and1_60                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_4and1_59                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_5and1_58                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_18and1_45               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_6and1_57                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_20and1_43               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_7and1_56                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_8and1_55                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_17and1_46               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_9and1_54                : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_10and1_53               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_16and1_47               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_11and1_52               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_15and1_48               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_12and1_51               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_13and1_50               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_14and1_49               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_21and1_42               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_22and1_41               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_23and1_40               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_24and1_39               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_25and1_38               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_26and1_37               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_27and1_36               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_28and1_35               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_29and1_34               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_30and1_33               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL tapsum_1_31and1_32               : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL inputmux                         : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL input_pipeline_phase032_cast     : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL inputmux_1                       : signed(32 DOWNTO 0); -- sfix33_En28
  SIGNAL product                          : signed(64 DOWNTO 0); -- sfix65_En60
  SIGNAL product_mux                      : signed(31 DOWNTO 0); -- sfix32_En32
  SIGNAL product_1                        : signed(64 DOWNTO 0); -- sfix65_En60
  SIGNAL product_mux_1                    : signed(31 DOWNTO 0); -- sfix32_En32
  SIGNAL phasemux                         : signed(64 DOWNTO 0); -- sfix65_En60
  SIGNAL sumofproducts                    : signed(65 DOWNTO 0); -- sfix66_En60
  SIGNAL sumofproducts_cast               : signed(80 DOWNTO 0); -- sfix81_En60
  SIGNAL acc_sum                          : signed(80 DOWNTO 0); -- sfix81_En60
  SIGNAL accreg_in                        : signed(80 DOWNTO 0); -- sfix81_En60
  SIGNAL accreg_out                       : signed(80 DOWNTO 0); -- sfix81_En60
  SIGNAL add_temp                         : signed(81 DOWNTO 0); -- sfix82_En60
  SIGNAL accreg_final                     : signed(80 DOWNTO 0); -- sfix81_En60
  SIGNAL output_typeconvert               : signed(70 DOWNTO 0); -- sfix71_En60
  SIGNAL output_register                  : signed(70 DOWNTO 0); -- sfix71_En60


BEGIN

  -- Block Statements
  Counter : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cur_count <= to_unsigned(31, 5);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF cur_count = to_unsigned(31, 5) THEN
          cur_count <= to_unsigned(0, 5);
        ELSE
          cur_count <= cur_count + to_unsigned(1, 5);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter;

  phase_0 <= '1' WHEN cur_count = to_unsigned(0, 5) AND clk_enable = '1' ELSE '0';

  phase_1 <= '1' WHEN  (((cur_count = to_unsigned(1, 5))  OR
                         (cur_count = to_unsigned(2, 5))  OR
                         (cur_count = to_unsigned(3, 5))  OR
                         (cur_count = to_unsigned(4, 5))  OR
                         (cur_count = to_unsigned(5, 5))  OR
                         (cur_count = to_unsigned(6, 5))  OR
                         (cur_count = to_unsigned(7, 5))  OR
                         (cur_count = to_unsigned(8, 5))  OR
                         (cur_count = to_unsigned(9, 5))  OR
                         (cur_count = to_unsigned(10, 5))  OR
                         (cur_count = to_unsigned(11, 5))  OR
                         (cur_count = to_unsigned(12, 5))  OR
                         (cur_count = to_unsigned(13, 5))  OR
                         (cur_count = to_unsigned(14, 5))  OR
                         (cur_count = to_unsigned(15, 5))  OR
                         (cur_count = to_unsigned(16, 5))  OR
                         (cur_count = to_unsigned(17, 5))  OR
                         (cur_count = to_unsigned(18, 5))  OR
                         (cur_count = to_unsigned(19, 5))  OR
                         (cur_count = to_unsigned(20, 5))  OR
                         (cur_count = to_unsigned(21, 5))  OR
                         (cur_count = to_unsigned(22, 5))  OR
                         (cur_count = to_unsigned(23, 5))  OR
                         (cur_count = to_unsigned(24, 5))  OR
                         (cur_count = to_unsigned(25, 5))  OR
                         (cur_count = to_unsigned(26, 5))  OR
                         (cur_count = to_unsigned(27, 5))  OR
                         (cur_count = to_unsigned(28, 5))  OR
                         (cur_count = to_unsigned(29, 5))  OR
                         (cur_count = to_unsigned(30, 5))  OR
                         (cur_count = to_unsigned(31, 5)))  AND clk_enable = '1') ELSE '0';

  phase_16 <= '1' WHEN cur_count = to_unsigned(16, 5) AND clk_enable = '1' ELSE '0';

  phase_17 <= '1' WHEN cur_count = to_unsigned(17, 5) AND clk_enable = '1' ELSE '0';

  phase_temp <=  phase_0 AND const_one;

  ceout_delay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      int_delay_pipe <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        int_delay_pipe(1 TO 31) <= int_delay_pipe(0 TO 30);
        int_delay_pipe(0) <= phase_temp;
      END IF;
    END IF;
  END PROCESS ceout_delay_process;
  phase_reg_temp <= int_delay_pipe(31);

  phase_reg <=  phase_reg_temp AND phase_temp;

  ce_out_register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ce_out_reg <= '0';
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        ce_out_reg <= phase_reg;
      END IF;
    END IF; 
  END PROCESS ce_out_register_process;

  input_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        input_register <= signed(filter_in);
      END IF;
    END IF; 
  END PROCESS input_reg_process;

  Delay_Pipeline_Phase0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase0(0 TO 64) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_0 = '1' THEN
        input_pipeline_phase0(0) <= input_register;
        input_pipeline_phase0(1 TO 64) <= input_pipeline_phase0(0 TO 63);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase0_process;

  Delay_Pipeline_Phase1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      input_pipeline_phase1(0 TO 64) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk'event AND clk = '1' THEN
      IF phase_16 = '1' THEN
        input_pipeline_phase1(0) <= input_register;
        input_pipeline_phase1(1 TO 64) <= input_pipeline_phase1(0 TO 63);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_Phase1_process;

  -- Adding (or subtracting) the taps based on the symmetry (or asymmetry)

  tapsum_0_6and0_58 <= resize(input_pipeline_phase0(6), 33) + resize(input_pipeline_phase0(58), 33);

  tapsum_0_8and0_56 <= resize(input_pipeline_phase0(8), 33) + resize(input_pipeline_phase0(56), 33);

  tapsum_0_5and0_59 <= resize(input_pipeline_phase0(5), 33) + resize(input_pipeline_phase0(59), 33);

  tapsum_0_4and0_60 <= resize(input_pipeline_phase0(4), 33) + resize(input_pipeline_phase0(60), 33);

  tapsum_0_3and0_61 <= resize(input_pipeline_phase0(3), 33) + resize(input_pipeline_phase0(61), 33);

  tapsum_0_2and0_62 <= resize(input_pipeline_phase0(2), 33) + resize(input_pipeline_phase0(62), 33);

  tapsum_0_1and0_63 <= resize(input_pipeline_phase0(1), 33) + resize(input_pipeline_phase0(63), 33);

  tapsum_0_0and0_64 <= resize(input_pipeline_phase0(0), 33) + resize(input_pipeline_phase0(64), 33);

  tapsum_0_9and0_55 <= resize(input_pipeline_phase0(9), 33) + resize(input_pipeline_phase0(55), 33);

  tapsum_0_10and0_54 <= resize(input_pipeline_phase0(10), 33) + resize(input_pipeline_phase0(54), 33);

  tapsum_0_11and0_53 <= resize(input_pipeline_phase0(11), 33) + resize(input_pipeline_phase0(53), 33);

  tapsum_0_12and0_52 <= resize(input_pipeline_phase0(12), 33) + resize(input_pipeline_phase0(52), 33);

  tapsum_0_13and0_51 <= resize(input_pipeline_phase0(13), 33) + resize(input_pipeline_phase0(51), 33);

  tapsum_0_14and0_50 <= resize(input_pipeline_phase0(14), 33) + resize(input_pipeline_phase0(50), 33);

  tapsum_0_15and0_49 <= resize(input_pipeline_phase0(15), 33) + resize(input_pipeline_phase0(49), 33);

  tapsum_0_16and0_48 <= resize(input_pipeline_phase0(16), 33) + resize(input_pipeline_phase0(48), 33);

  tapsum_0_17and0_47 <= resize(input_pipeline_phase0(17), 33) + resize(input_pipeline_phase0(47), 33);

  tapsum_0_18and0_46 <= resize(input_pipeline_phase0(18), 33) + resize(input_pipeline_phase0(46), 33);

  tapsum_0_19and0_45 <= resize(input_pipeline_phase0(19), 33) + resize(input_pipeline_phase0(45), 33);

  tapsum_0_20and0_44 <= resize(input_pipeline_phase0(20), 33) + resize(input_pipeline_phase0(44), 33);

  tapsum_0_21and0_43 <= resize(input_pipeline_phase0(21), 33) + resize(input_pipeline_phase0(43), 33);

  tapsum_0_22and0_42 <= resize(input_pipeline_phase0(22), 33) + resize(input_pipeline_phase0(42), 33);

  tapsum_0_23and0_41 <= resize(input_pipeline_phase0(23), 33) + resize(input_pipeline_phase0(41), 33);

  tapsum_0_24and0_40 <= resize(input_pipeline_phase0(24), 33) + resize(input_pipeline_phase0(40), 33);

  tapsum_0_25and0_39 <= resize(input_pipeline_phase0(25), 33) + resize(input_pipeline_phase0(39), 33);

  tapsum_0_26and0_38 <= resize(input_pipeline_phase0(26), 33) + resize(input_pipeline_phase0(38), 33);

  tapsum_0_27and0_37 <= resize(input_pipeline_phase0(27), 33) + resize(input_pipeline_phase0(37), 33);

  tapsum_0_28and0_36 <= resize(input_pipeline_phase0(28), 33) + resize(input_pipeline_phase0(36), 33);

  tapsum_0_29and0_35 <= resize(input_pipeline_phase0(29), 33) + resize(input_pipeline_phase0(35), 33);

  tapsum_0_30and0_34 <= resize(input_pipeline_phase0(30), 33) + resize(input_pipeline_phase0(34), 33);

  tapsum_0_31and0_33 <= resize(input_pipeline_phase0(31), 33) + resize(input_pipeline_phase0(33), 33);

  tapsum_1_0and1_63 <= resize(input_pipeline_phase1(0), 33) + resize(input_pipeline_phase1(63), 33);

  tapsum_1_1and1_62 <= resize(input_pipeline_phase1(1), 33) + resize(input_pipeline_phase1(62), 33);

  tapsum_1_2and1_61 <= resize(input_pipeline_phase1(2), 33) + resize(input_pipeline_phase1(61), 33);

  tapsum_1_3and1_60 <= resize(input_pipeline_phase1(3), 33) + resize(input_pipeline_phase1(60), 33);

  tapsum_1_4and1_59 <= resize(input_pipeline_phase1(4), 33) + resize(input_pipeline_phase1(59), 33);

  tapsum_1_5and1_58 <= resize(input_pipeline_phase1(5), 33) + resize(input_pipeline_phase1(58), 33);

  tapsum_1_18and1_45 <= resize(input_pipeline_phase1(18), 33) + resize(input_pipeline_phase1(45), 33);

  tapsum_1_6and1_57 <= resize(input_pipeline_phase1(6), 33) + resize(input_pipeline_phase1(57), 33);

  tapsum_1_20and1_43 <= resize(input_pipeline_phase1(20), 33) + resize(input_pipeline_phase1(43), 33);

  tapsum_1_7and1_56 <= resize(input_pipeline_phase1(7), 33) + resize(input_pipeline_phase1(56), 33);

  tapsum_1_8and1_55 <= resize(input_pipeline_phase1(8), 33) + resize(input_pipeline_phase1(55), 33);

  tapsum_1_17and1_46 <= resize(input_pipeline_phase1(17), 33) + resize(input_pipeline_phase1(46), 33);

  tapsum_1_9and1_54 <= resize(input_pipeline_phase1(9), 33) + resize(input_pipeline_phase1(54), 33);

  tapsum_1_10and1_53 <= resize(input_pipeline_phase1(10), 33) + resize(input_pipeline_phase1(53), 33);

  tapsum_1_16and1_47 <= resize(input_pipeline_phase1(16), 33) + resize(input_pipeline_phase1(47), 33);

  tapsum_1_11and1_52 <= resize(input_pipeline_phase1(11), 33) + resize(input_pipeline_phase1(52), 33);

  tapsum_1_15and1_48 <= resize(input_pipeline_phase1(15), 33) + resize(input_pipeline_phase1(48), 33);

  tapsum_1_12and1_51 <= resize(input_pipeline_phase1(12), 33) + resize(input_pipeline_phase1(51), 33);

  tapsum_1_13and1_50 <= resize(input_pipeline_phase1(13), 33) + resize(input_pipeline_phase1(50), 33);

  tapsum_1_14and1_49 <= resize(input_pipeline_phase1(14), 33) + resize(input_pipeline_phase1(49), 33);

  tapsum_1_21and1_42 <= resize(input_pipeline_phase1(21), 33) + resize(input_pipeline_phase1(42), 33);

  tapsum_1_22and1_41 <= resize(input_pipeline_phase1(22), 33) + resize(input_pipeline_phase1(41), 33);

  tapsum_1_23and1_40 <= resize(input_pipeline_phase1(23), 33) + resize(input_pipeline_phase1(40), 33);

  tapsum_1_24and1_39 <= resize(input_pipeline_phase1(24), 33) + resize(input_pipeline_phase1(39), 33);

  tapsum_1_25and1_38 <= resize(input_pipeline_phase1(25), 33) + resize(input_pipeline_phase1(38), 33);

  tapsum_1_26and1_37 <= resize(input_pipeline_phase1(26), 33) + resize(input_pipeline_phase1(37), 33);

  tapsum_1_27and1_36 <= resize(input_pipeline_phase1(27), 33) + resize(input_pipeline_phase1(36), 33);

  tapsum_1_28and1_35 <= resize(input_pipeline_phase1(28), 33) + resize(input_pipeline_phase1(35), 33);

  tapsum_1_29and1_34 <= resize(input_pipeline_phase1(29), 33) + resize(input_pipeline_phase1(34), 33);

  tapsum_1_30and1_33 <= resize(input_pipeline_phase1(30), 33) + resize(input_pipeline_phase1(33), 33);

  tapsum_1_31and1_32 <= resize(input_pipeline_phase1(31), 33) + resize(input_pipeline_phase1(32), 33);

  -- Mux(es) to select the input taps for multipliers 

  inputmux <= tapsum_0_0and0_64 WHEN ( cur_count = to_unsigned(1, 5) ) ELSE
                   tapsum_0_2and0_62 WHEN ( cur_count = to_unsigned(2, 5) ) ELSE
                   tapsum_0_4and0_60 WHEN ( cur_count = to_unsigned(3, 5) ) ELSE
                   tapsum_0_6and0_58 WHEN ( cur_count = to_unsigned(4, 5) ) ELSE
                   tapsum_0_9and0_55 WHEN ( cur_count = to_unsigned(5, 5) ) ELSE
                   tapsum_0_11and0_53 WHEN ( cur_count = to_unsigned(6, 5) ) ELSE
                   tapsum_0_13and0_51 WHEN ( cur_count = to_unsigned(7, 5) ) ELSE
                   tapsum_0_15and0_49 WHEN ( cur_count = to_unsigned(8, 5) ) ELSE
                   tapsum_0_17and0_47 WHEN ( cur_count = to_unsigned(9, 5) ) ELSE
                   tapsum_0_19and0_45 WHEN ( cur_count = to_unsigned(10, 5) ) ELSE
                   tapsum_0_21and0_43 WHEN ( cur_count = to_unsigned(11, 5) ) ELSE
                   tapsum_0_23and0_41 WHEN ( cur_count = to_unsigned(12, 5) ) ELSE
                   tapsum_0_25and0_39 WHEN ( cur_count = to_unsigned(13, 5) ) ELSE
                   tapsum_0_27and0_37 WHEN ( cur_count = to_unsigned(14, 5) ) ELSE
                   tapsum_0_29and0_35 WHEN ( cur_count = to_unsigned(15, 5) ) ELSE
                   tapsum_0_31and0_33 WHEN ( cur_count = to_unsigned(16, 5) ) ELSE
                   tapsum_1_0and1_63 WHEN ( cur_count = to_unsigned(17, 5) ) ELSE
                   tapsum_1_2and1_61 WHEN ( cur_count = to_unsigned(18, 5) ) ELSE
                   tapsum_1_4and1_59 WHEN ( cur_count = to_unsigned(19, 5) ) ELSE
                   tapsum_1_6and1_57 WHEN ( cur_count = to_unsigned(20, 5) ) ELSE
                   tapsum_1_8and1_55 WHEN ( cur_count = to_unsigned(21, 5) ) ELSE
                   tapsum_1_10and1_53 WHEN ( cur_count = to_unsigned(22, 5) ) ELSE
                   tapsum_1_12and1_51 WHEN ( cur_count = to_unsigned(23, 5) ) ELSE
                   tapsum_1_14and1_49 WHEN ( cur_count = to_unsigned(24, 5) ) ELSE
                   tapsum_1_16and1_47 WHEN ( cur_count = to_unsigned(25, 5) ) ELSE
                   tapsum_1_18and1_45 WHEN ( cur_count = to_unsigned(26, 5) ) ELSE
                   tapsum_1_21and1_42 WHEN ( cur_count = to_unsigned(27, 5) ) ELSE
                   tapsum_1_23and1_40 WHEN ( cur_count = to_unsigned(28, 5) ) ELSE
                   tapsum_1_25and1_38 WHEN ( cur_count = to_unsigned(29, 5) ) ELSE
                   tapsum_1_27and1_36 WHEN ( cur_count = to_unsigned(30, 5) ) ELSE
                   tapsum_1_29and1_34 WHEN ( cur_count = to_unsigned(31, 5) ) ELSE
                   tapsum_1_31and1_32;

  input_pipeline_phase032_cast <= resize(input_pipeline_phase0(32), 33);

  inputmux_1 <= tapsum_0_1and0_63 WHEN ( cur_count = to_unsigned(1, 5) ) ELSE
                     tapsum_0_3and0_61 WHEN ( cur_count = to_unsigned(2, 5) ) ELSE
                     tapsum_0_5and0_59 WHEN ( cur_count = to_unsigned(3, 5) ) ELSE
                     tapsum_0_8and0_56 WHEN ( cur_count = to_unsigned(4, 5) ) ELSE
                     tapsum_0_10and0_54 WHEN ( cur_count = to_unsigned(5, 5) ) ELSE
                     tapsum_0_12and0_52 WHEN ( cur_count = to_unsigned(6, 5) ) ELSE
                     tapsum_0_14and0_50 WHEN ( cur_count = to_unsigned(7, 5) ) ELSE
                     tapsum_0_16and0_48 WHEN ( cur_count = to_unsigned(8, 5) ) ELSE
                     tapsum_0_18and0_46 WHEN ( cur_count = to_unsigned(9, 5) ) ELSE
                     tapsum_0_20and0_44 WHEN ( cur_count = to_unsigned(10, 5) ) ELSE
                     tapsum_0_22and0_42 WHEN ( cur_count = to_unsigned(11, 5) ) ELSE
                     tapsum_0_24and0_40 WHEN ( cur_count = to_unsigned(12, 5) ) ELSE
                     tapsum_0_26and0_38 WHEN ( cur_count = to_unsigned(13, 5) ) ELSE
                     tapsum_0_28and0_36 WHEN ( cur_count = to_unsigned(14, 5) ) ELSE
                     tapsum_0_30and0_34 WHEN ( cur_count = to_unsigned(15, 5) ) ELSE
                     input_pipeline_phase032_cast WHEN ( cur_count = to_unsigned(16, 5) ) ELSE
                     tapsum_1_1and1_62 WHEN ( cur_count = to_unsigned(17, 5) ) ELSE
                     tapsum_1_3and1_60 WHEN ( cur_count = to_unsigned(18, 5) ) ELSE
                     tapsum_1_5and1_58 WHEN ( cur_count = to_unsigned(19, 5) ) ELSE
                     tapsum_1_7and1_56 WHEN ( cur_count = to_unsigned(20, 5) ) ELSE
                     tapsum_1_9and1_54 WHEN ( cur_count = to_unsigned(21, 5) ) ELSE
                     tapsum_1_11and1_52 WHEN ( cur_count = to_unsigned(22, 5) ) ELSE
                     tapsum_1_13and1_50 WHEN ( cur_count = to_unsigned(23, 5) ) ELSE
                     tapsum_1_15and1_48 WHEN ( cur_count = to_unsigned(24, 5) ) ELSE
                     tapsum_1_17and1_46 WHEN ( cur_count = to_unsigned(25, 5) ) ELSE
                     tapsum_1_20and1_43 WHEN ( cur_count = to_unsigned(26, 5) ) ELSE
                     tapsum_1_22and1_41 WHEN ( cur_count = to_unsigned(27, 5) ) ELSE
                     tapsum_1_24and1_39 WHEN ( cur_count = to_unsigned(28, 5) ) ELSE
                     tapsum_1_26and1_37 WHEN ( cur_count = to_unsigned(29, 5) ) ELSE
                     tapsum_1_28and1_35 WHEN ( cur_count = to_unsigned(30, 5) ) ELSE
                     tapsum_1_30and1_33;

  product_mux <= coeffphase1_1 WHEN ( cur_count = to_unsigned(1, 5) ) ELSE
                      coeffphase1_3 WHEN ( cur_count = to_unsigned(2, 5) ) ELSE
                      coeffphase1_5 WHEN ( cur_count = to_unsigned(3, 5) ) ELSE
                      coeffphase1_7 WHEN ( cur_count = to_unsigned(4, 5) ) ELSE
                      coeffphase1_10 WHEN ( cur_count = to_unsigned(5, 5) ) ELSE
                      coeffphase1_12 WHEN ( cur_count = to_unsigned(6, 5) ) ELSE
                      coeffphase1_14 WHEN ( cur_count = to_unsigned(7, 5) ) ELSE
                      coeffphase1_16 WHEN ( cur_count = to_unsigned(8, 5) ) ELSE
                      coeffphase1_18 WHEN ( cur_count = to_unsigned(9, 5) ) ELSE
                      coeffphase1_20 WHEN ( cur_count = to_unsigned(10, 5) ) ELSE
                      coeffphase1_22 WHEN ( cur_count = to_unsigned(11, 5) ) ELSE
                      coeffphase1_24 WHEN ( cur_count = to_unsigned(12, 5) ) ELSE
                      coeffphase1_26 WHEN ( cur_count = to_unsigned(13, 5) ) ELSE
                      coeffphase1_28 WHEN ( cur_count = to_unsigned(14, 5) ) ELSE
                      coeffphase1_30 WHEN ( cur_count = to_unsigned(15, 5) ) ELSE
                      coeffphase1_32 WHEN ( cur_count = to_unsigned(16, 5) ) ELSE
                      coeffphase2_1 WHEN ( cur_count = to_unsigned(17, 5) ) ELSE
                      coeffphase2_3 WHEN ( cur_count = to_unsigned(18, 5) ) ELSE
                      coeffphase2_5 WHEN ( cur_count = to_unsigned(19, 5) ) ELSE
                      coeffphase2_7 WHEN ( cur_count = to_unsigned(20, 5) ) ELSE
                      coeffphase2_9 WHEN ( cur_count = to_unsigned(21, 5) ) ELSE
                      coeffphase2_11 WHEN ( cur_count = to_unsigned(22, 5) ) ELSE
                      coeffphase2_13 WHEN ( cur_count = to_unsigned(23, 5) ) ELSE
                      coeffphase2_15 WHEN ( cur_count = to_unsigned(24, 5) ) ELSE
                      coeffphase2_17 WHEN ( cur_count = to_unsigned(25, 5) ) ELSE
                      coeffphase2_19 WHEN ( cur_count = to_unsigned(26, 5) ) ELSE
                      coeffphase2_22 WHEN ( cur_count = to_unsigned(27, 5) ) ELSE
                      coeffphase2_24 WHEN ( cur_count = to_unsigned(28, 5) ) ELSE
                      coeffphase2_26 WHEN ( cur_count = to_unsigned(29, 5) ) ELSE
                      coeffphase2_28 WHEN ( cur_count = to_unsigned(30, 5) ) ELSE
                      coeffphase2_30 WHEN ( cur_count = to_unsigned(31, 5) ) ELSE
                      coeffphase2_32;
  product <= inputmux * product_mux;

  product_mux_1 <= coeffphase1_2 WHEN ( cur_count = to_unsigned(1, 5) ) ELSE
                        coeffphase1_4 WHEN ( cur_count = to_unsigned(2, 5) ) ELSE
                        coeffphase1_6 WHEN ( cur_count = to_unsigned(3, 5) ) ELSE
                        coeffphase1_9 WHEN ( cur_count = to_unsigned(4, 5) ) ELSE
                        coeffphase1_11 WHEN ( cur_count = to_unsigned(5, 5) ) ELSE
                        coeffphase1_13 WHEN ( cur_count = to_unsigned(6, 5) ) ELSE
                        coeffphase1_15 WHEN ( cur_count = to_unsigned(7, 5) ) ELSE
                        coeffphase1_17 WHEN ( cur_count = to_unsigned(8, 5) ) ELSE
                        coeffphase1_19 WHEN ( cur_count = to_unsigned(9, 5) ) ELSE
                        coeffphase1_21 WHEN ( cur_count = to_unsigned(10, 5) ) ELSE
                        coeffphase1_23 WHEN ( cur_count = to_unsigned(11, 5) ) ELSE
                        coeffphase1_25 WHEN ( cur_count = to_unsigned(12, 5) ) ELSE
                        coeffphase1_27 WHEN ( cur_count = to_unsigned(13, 5) ) ELSE
                        coeffphase1_29 WHEN ( cur_count = to_unsigned(14, 5) ) ELSE
                        coeffphase1_31 WHEN ( cur_count = to_unsigned(15, 5) ) ELSE
                        coeffphase1_33 WHEN ( cur_count = to_unsigned(16, 5) ) ELSE
                        coeffphase2_2 WHEN ( cur_count = to_unsigned(17, 5) ) ELSE
                        coeffphase2_4 WHEN ( cur_count = to_unsigned(18, 5) ) ELSE
                        coeffphase2_6 WHEN ( cur_count = to_unsigned(19, 5) ) ELSE
                        coeffphase2_8 WHEN ( cur_count = to_unsigned(20, 5) ) ELSE
                        coeffphase2_10 WHEN ( cur_count = to_unsigned(21, 5) ) ELSE
                        coeffphase2_12 WHEN ( cur_count = to_unsigned(22, 5) ) ELSE
                        coeffphase2_14 WHEN ( cur_count = to_unsigned(23, 5) ) ELSE
                        coeffphase2_16 WHEN ( cur_count = to_unsigned(24, 5) ) ELSE
                        coeffphase2_18 WHEN ( cur_count = to_unsigned(25, 5) ) ELSE
                        coeffphase2_21 WHEN ( cur_count = to_unsigned(26, 5) ) ELSE
                        coeffphase2_23 WHEN ( cur_count = to_unsigned(27, 5) ) ELSE
                        coeffphase2_25 WHEN ( cur_count = to_unsigned(28, 5) ) ELSE
                        coeffphase2_27 WHEN ( cur_count = to_unsigned(29, 5) ) ELSE
                        coeffphase2_29 WHEN ( cur_count = to_unsigned(30, 5) ) ELSE
                        coeffphase2_31;
  product_1 <= inputmux_1 * product_mux_1;

  phasemux <= product_1 WHEN ( phase_1 = '1' ) ELSE
                   const_zero;


  -- Add the products in linear fashion

  sumofproducts <= resize(product, 66) + resize(phasemux, 66);

  -- Resize the sum of products to the accumulator type for full precision addition

  sumofproducts_cast <= resize(sumofproducts, 81);

  -- Accumulator register with a mux to reset it with the first addend

  add_temp <= resize(sumofproducts_cast, 82) + resize(accreg_out, 82);
  acc_sum <= add_temp(80 DOWNTO 0);

  accreg_in <= sumofproducts_cast WHEN ( phase_17 = '1' ) ELSE
                    acc_sum;

  Acc_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      accreg_out <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        accreg_out <= accreg_in;
      END IF;
    END IF; 
  END PROCESS Acc_reg_process;

  -- Register to hold the final value of the accumulated sum

  Acc_finalreg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      accreg_final <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_17 = '1' THEN
        accreg_final <= accreg_out;
      END IF;
    END IF; 
  END PROCESS Acc_finalreg_process;

  output_typeconvert <= accreg_final(70 DOWNTO 0);

  output_register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_reg = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS output_register_process;

  -- Assignment Statements
  ce_out <= ce_out_reg;
  filter_out <= std_logic_vector(output_register);
END rtl;
