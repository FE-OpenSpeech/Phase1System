-- -------------------------------------------------------------
--
-- Module: FIR_InterpolatorBy2
-- Generated by MATLAB(R) 9.2 and the Filter Design HDL Coder 3.1.1.
-- Generated on: 2017-06-06 16:17:10
-- -------------------------------------------------------------

-- -------------------------------------------------------------
-- HDL Code Generation Options:
--
-- TargetLanguage: VHDL
-- ClockInputs: Multiple
-- Name: FIR_InterpolatorBy2
-- SerialPartition: 13
-- InputDataType: numerictype(1,32,28)
-- TestBenchStimulus: chirp 

-- -------------------------------------------------------------
-- HDL Implementation    : Fully Serial
-- Folding Factor        : 13
-- -------------------------------------------------------------
-- Filter Settings:
--
-- Discrete-Time FIR Multirate Filter (real)
-- -----------------------------------------
-- Filter Structure      : Direct-Form FIR Polyphase Interpolator
-- Interpolation Factor  : 2
-- Polyphase Length      : 16
-- Filter Length         : 32
-- Stable                : Yes
-- Linear Phase          : Yes (Type 2)
--
-- Arithmetic            : fixed
-- Numerator             : s32,32 -> [-5.000000e-01 5.000000e-01)
-- -------------------------------------------------------------
-- Multipliers           : 45


LIBRARY IEEE;
USE IEEE.std_logic_1164.all;
USE IEEE.numeric_std.ALL;

ENTITY FIR_InterpolatorBy2 IS
   PORT( clk                             :   IN    std_logic;                    -- clk = 32 * Fs_input
         clk_enable                      :   IN    std_logic; 
         reset                           :   IN    std_logic; 
         filter_in                       :   IN    std_logic_vector(31 DOWNTO 0); -- sfix32_En28  -- Fs_input
         clk1                            :   IN    std_logic;                    -- clk1 = clk/16 = Fs_input * 2
         clk_enable1                     :   IN    std_logic; 
         reset1                          :   IN    std_logic; 
         filter_out                      :   OUT   std_logic_vector(67 DOWNTO 0)  -- sfix68_En60
         );
END FIR_InterpolatorBy2;
--% ### Starting VHDL code generation process for filter: FIR_InterpolatorBy2
--% ### Generating: FIR_InterpolatorBy2.vhd
--% ### Starting generation of FIR_InterpolatorBy2 VHDL entity
--% ### Starting generation of FIR_InterpolatorBy2 VHDL architecture
--% ### Clock rate is 32 times the input and 16 times the output sample rate for this architecture.
--% ### Successful completion of VHDL code generation process for filter: FIR_InterpolatorBy2
--% ### HDL latency is 1 samples


----------------------------------------------------------------
--Module Architecture: FIR_InterpolatorBy2
----------------------------------------------------------------
ARCHITECTURE rtl OF FIR_InterpolatorBy2 IS
  -- Local Functions
  -- Type Definitions
  TYPE delay_pipeline_type IS ARRAY (NATURAL range <>) OF signed(31 DOWNTO 0); -- sfix32_En28
  -- Constants
  CONSTANT coeffphase1_1                  : signed(31 DOWNTO 0) := to_signed(4149976, 32); -- sfix32_En32
  CONSTANT coeffphase1_2                  : signed(31 DOWNTO 0) := to_signed(-11302200, 32); -- sfix32_En32
  CONSTANT coeffphase1_3                  : signed(31 DOWNTO 0) := to_signed(25236462, 32); -- sfix32_En32
  CONSTANT coeffphase1_4                  : signed(31 DOWNTO 0) := to_signed(-32182595, 32); -- sfix32_En32
  CONSTANT coeffphase1_5                  : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase1_6                  : signed(31 DOWNTO 0) := to_signed(108559708, 32); -- sfix32_En32
  CONSTANT coeffphase1_7                  : signed(31 DOWNTO 0) := to_signed(-330462922, 32); -- sfix32_En32
  CONSTANT coeffphase1_8                  : signed(31 DOWNTO 0) := to_signed(849031598, 32); -- sfix32_En32
  CONSTANT coeffphase1_9                  : signed(31 DOWNTO 0) := to_signed(1604320543, 32); -- sfix32_En32
  CONSTANT coeffphase1_10                 : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase1_11                 : signed(31 DOWNTO 0) := to_signed(-146797528, 32); -- sfix32_En32
  CONSTANT coeffphase1_12                 : signed(31 DOWNTO 0) := to_signed(131160150, 32); -- sfix32_En32
  CONSTANT coeffphase1_13                 : signed(31 DOWNTO 0) := to_signed(-71989797, 32); -- sfix32_En32
  CONSTANT coeffphase1_14                 : signed(31 DOWNTO 0) := to_signed(22718585, 32); -- sfix32_En32
  CONSTANT coeffphase1_15                 : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase1_16                 : signed(31 DOWNTO 0) := to_signed(-4958333, 32); -- sfix32_En32
  CONSTANT coeffphase2_1                  : signed(31 DOWNTO 0) := to_signed(-4958333, 32); -- sfix32_En32
  CONSTANT coeffphase2_2                  : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase2_3                  : signed(31 DOWNTO 0) := to_signed(22718585, 32); -- sfix32_En32
  CONSTANT coeffphase2_4                  : signed(31 DOWNTO 0) := to_signed(-71989797, 32); -- sfix32_En32
  CONSTANT coeffphase2_5                  : signed(31 DOWNTO 0) := to_signed(131160150, 32); -- sfix32_En32
  CONSTANT coeffphase2_6                  : signed(31 DOWNTO 0) := to_signed(-146797528, 32); -- sfix32_En32
  CONSTANT coeffphase2_7                  : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase2_8                  : signed(31 DOWNTO 0) := to_signed(1604320543, 32); -- sfix32_En32
  CONSTANT coeffphase2_9                  : signed(31 DOWNTO 0) := to_signed(849031598, 32); -- sfix32_En32
  CONSTANT coeffphase2_10                 : signed(31 DOWNTO 0) := to_signed(-330462922, 32); -- sfix32_En32
  CONSTANT coeffphase2_11                 : signed(31 DOWNTO 0) := to_signed(108559708, 32); -- sfix32_En32
  CONSTANT coeffphase2_12                 : signed(31 DOWNTO 0) := to_signed(0, 32); -- sfix32_En32
  CONSTANT coeffphase2_13                 : signed(31 DOWNTO 0) := to_signed(-32182595, 32); -- sfix32_En32
  CONSTANT coeffphase2_14                 : signed(31 DOWNTO 0) := to_signed(25236462, 32); -- sfix32_En32
  CONSTANT coeffphase2_15                 : signed(31 DOWNTO 0) := to_signed(-11302200, 32); -- sfix32_En32
  CONSTANT coeffphase2_16                 : signed(31 DOWNTO 0) := to_signed(4149976, 32); -- sfix32_En32

  -- Signals
  SIGNAL cur_count                        : unsigned(4 DOWNTO 0); -- ufix5
  SIGNAL phase_31                         : std_logic; -- boolean
  SIGNAL phase_16                         : std_logic; -- boolean
  SIGNAL cur_count1                       : unsigned(3 DOWNTO 0); -- ufix4
  SIGNAL delay_pipeline                   : delay_pipeline_type(0 TO 15); -- sfix32_En28
  SIGNAL inputmux                         : signed(31 DOWNTO 0); -- sfix32_En28
  SIGNAL acc_final                        : signed(67 DOWNTO 0); -- sfix68_En60
  SIGNAL acc_out                          : signed(67 DOWNTO 0); -- sfix68_En60
  SIGNAL product                          : signed(63 DOWNTO 0); -- sfix64_En60
  SIGNAL product_mux                      : signed(31 DOWNTO 0); -- sfix32_En32
  SIGNAL prod_typeconvert                 : signed(67 DOWNTO 0); -- sfix68_En60
  SIGNAL acc_sum                          : signed(67 DOWNTO 0); -- sfix68_En60
  SIGNAL acc_in                           : signed(67 DOWNTO 0); -- sfix68_En60
  SIGNAL add_temp                         : signed(68 DOWNTO 0); -- sfix69_En60
  SIGNAL output_typeconvert               : signed(67 DOWNTO 0); -- sfix68_En60
  SIGNAL output_register                  : signed(67 DOWNTO 0); -- sfix68_En60


BEGIN

  -- Block Statements
  Counter : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      cur_count <= to_unsigned(31, 5);
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        IF cur_count = to_unsigned(31, 5) THEN
          cur_count <= to_unsigned(0, 5);
        ELSE
          cur_count <= cur_count + to_unsigned(1, 5);
        END IF;
      END IF;
    END IF; 
  END PROCESS Counter;

  phase_31 <= '1' WHEN cur_count = to_unsigned(31, 5) AND clk_enable = '1' ELSE '0';

  phase_16 <= '1' WHEN  (((cur_count = to_unsigned(0, 5))  OR
                          (cur_count = to_unsigned(16, 5)))  AND clk_enable = '1') ELSE '0';

  cur_count1 <= cur_count(3) & cur_count(2) & cur_count(1) & cur_count(0);

  --   ---------------- Delay Registers ----------------

  Delay_Pipeline_process : PROCESS (clk1, reset1)
  BEGIN
    IF reset1 = '1' THEN
      delay_pipeline(0 TO 15) <= (OTHERS => (OTHERS => '0'));
    ELSIF clk1'event AND clk1 = '1' THEN
      IF clk_enable1 = '1' THEN
        delay_pipeline(0) <= signed(filter_in);
        delay_pipeline(1 TO 15) <= delay_pipeline(0 TO 14);
      END IF;
    END IF; 
  END PROCESS Delay_Pipeline_process;

  inputmux <= delay_pipeline(0) WHEN ( cur_count1 = to_unsigned(0, 4) ) ELSE
                   delay_pipeline(1) WHEN ( cur_count1 = to_unsigned(1, 4) ) ELSE
                   delay_pipeline(2) WHEN ( cur_count1 = to_unsigned(2, 4) ) ELSE
                   delay_pipeline(3) WHEN ( cur_count1 = to_unsigned(3, 4) ) ELSE
                   delay_pipeline(4) WHEN ( cur_count1 = to_unsigned(4, 4) ) ELSE
                   delay_pipeline(5) WHEN ( cur_count1 = to_unsigned(5, 4) ) ELSE
                   delay_pipeline(6) WHEN ( cur_count1 = to_unsigned(6, 4) ) ELSE
                   delay_pipeline(7) WHEN ( cur_count1 = to_unsigned(7, 4) ) ELSE
                   delay_pipeline(8) WHEN ( cur_count1 = to_unsigned(8, 4) ) ELSE
                   delay_pipeline(9) WHEN ( cur_count1 = to_unsigned(9, 4) ) ELSE
                   delay_pipeline(10) WHEN ( cur_count1 = to_unsigned(10, 4) ) ELSE
                   delay_pipeline(11) WHEN ( cur_count1 = to_unsigned(11, 4) ) ELSE
                   delay_pipeline(12) WHEN ( cur_count1 = to_unsigned(12, 4) ) ELSE
                   delay_pipeline(13) WHEN ( cur_count1 = to_unsigned(13, 4) ) ELSE
                   delay_pipeline(14) WHEN ( cur_count1 = to_unsigned(14, 4) ) ELSE
                   delay_pipeline(15);

  product_mux <= coeffphase1_1 WHEN ( cur_count = to_unsigned(0, 5) ) ELSE
                      coeffphase1_2 WHEN ( cur_count = to_unsigned(1, 5) ) ELSE
                      coeffphase1_3 WHEN ( cur_count = to_unsigned(2, 5) ) ELSE
                      coeffphase1_4 WHEN ( cur_count = to_unsigned(3, 5) ) ELSE
                      coeffphase1_5 WHEN ( cur_count = to_unsigned(4, 5) ) ELSE
                      coeffphase1_6 WHEN ( cur_count = to_unsigned(5, 5) ) ELSE
                      coeffphase1_7 WHEN ( cur_count = to_unsigned(6, 5) ) ELSE
                      coeffphase1_8 WHEN ( cur_count = to_unsigned(7, 5) ) ELSE
                      coeffphase1_9 WHEN ( cur_count = to_unsigned(8, 5) ) ELSE
                      coeffphase1_10 WHEN ( cur_count = to_unsigned(9, 5) ) ELSE
                      coeffphase1_11 WHEN ( cur_count = to_unsigned(10, 5) ) ELSE
                      coeffphase1_12 WHEN ( cur_count = to_unsigned(11, 5) ) ELSE
                      coeffphase1_13 WHEN ( cur_count = to_unsigned(12, 5) ) ELSE
                      coeffphase1_14 WHEN ( cur_count = to_unsigned(13, 5) ) ELSE
                      coeffphase1_15 WHEN ( cur_count = to_unsigned(14, 5) ) ELSE
                      coeffphase1_16 WHEN ( cur_count = to_unsigned(15, 5) ) ELSE
                      coeffphase2_1 WHEN ( cur_count = to_unsigned(16, 5) ) ELSE
                      coeffphase2_2 WHEN ( cur_count = to_unsigned(17, 5) ) ELSE
                      coeffphase2_3 WHEN ( cur_count = to_unsigned(18, 5) ) ELSE
                      coeffphase2_4 WHEN ( cur_count = to_unsigned(19, 5) ) ELSE
                      coeffphase2_5 WHEN ( cur_count = to_unsigned(20, 5) ) ELSE
                      coeffphase2_6 WHEN ( cur_count = to_unsigned(21, 5) ) ELSE
                      coeffphase2_7 WHEN ( cur_count = to_unsigned(22, 5) ) ELSE
                      coeffphase2_8 WHEN ( cur_count = to_unsigned(23, 5) ) ELSE
                      coeffphase2_9 WHEN ( cur_count = to_unsigned(24, 5) ) ELSE
                      coeffphase2_10 WHEN ( cur_count = to_unsigned(25, 5) ) ELSE
                      coeffphase2_11 WHEN ( cur_count = to_unsigned(26, 5) ) ELSE
                      coeffphase2_12 WHEN ( cur_count = to_unsigned(27, 5) ) ELSE
                      coeffphase2_13 WHEN ( cur_count = to_unsigned(28, 5) ) ELSE
                      coeffphase2_14 WHEN ( cur_count = to_unsigned(29, 5) ) ELSE
                      coeffphase2_15 WHEN ( cur_count = to_unsigned(30, 5) ) ELSE
                      coeffphase2_16;
  product <= inputmux * product_mux;

  prod_typeconvert <= resize(product, 68);

  add_temp <= resize(prod_typeconvert, 69) + resize(acc_out, 69);
  acc_sum <= add_temp(67 DOWNTO 0);

  acc_in <= prod_typeconvert WHEN ( phase_16 = '1' ) ELSE
                 acc_sum;

  Acc_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      acc_out <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF clk_enable = '1' THEN
        acc_out <= acc_in;
      END IF;
    END IF; 
  END PROCESS Acc_reg_process;

  Finalsum_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      acc_final <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_16 = '1' THEN
        acc_final <= acc_out;
      END IF;
    END IF; 
  END PROCESS Finalsum_reg_process;

  output_typeconvert <= acc_final;

  Output_Register_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      output_register <= (OTHERS => '0');
    ELSIF clk'event AND clk = '1' THEN
      IF phase_16 = '1' THEN
        output_register <= output_typeconvert;
      END IF;
    END IF; 
  END PROCESS Output_Register_process;

  -- Assignment Statements
  filter_out <= std_logic_vector(output_register);
END rtl;
